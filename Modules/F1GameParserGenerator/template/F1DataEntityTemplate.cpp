
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <{{&INCLUDE_HEADER}}>

{{&INCLUDE_FILES}}

namespace DogGE{
    namespace {{&NAMESPACE_NAME}}{
        {{&CONSTRUCTORS}}

        {{&GETTER_CODE}}
        {{&SETTER_CODE}}

        std::string {{&CLASS_NAME}}::getTableName(){
            return "{{&TABLE_NAME}}";
        }
        std::string {{&CLASS_NAME}}::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS {{&TABLE_NAME}}("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT{{&TABLE_FIELDS}})";
        }
        
        void {{&CLASS_NAME}}::matchIntData(std::string column,int data){
            {{&MATCH_INT_DATA}}
        }
        void {{&CLASS_NAME}}::matchInt64Data(std::string column,int64_t data){
            {{&MATCH_INT64_DATA}}
        }
        void {{&CLASS_NAME}}::matchRealData(std::string column,float data){
            {{&MATCH_REAL_DATA}}
        }
        void {{&CLASS_NAME}}::matchStringData(std::string column,std::string data){}
        void {{&CLASS_NAME}}::matchRawData(std::string column,char* data,int length){
            {{&MATCH_RAW_DATA}}
        }

        std::map<std::string,int> {{&CLASS_NAME}}::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            {{&GET_INT_MAP}}
            return ret;
        }
        std::map<std::string,int64_t> {{&CLASS_NAME}}::getInt64Map(){
            std::map<std::string,int64_t> ret;
            {{&GET_INT64_MAP}}
            return ret;
        }
        std::map<std::string,float> {{&CLASS_NAME}}::getRealMap(){
            std::map<std::string,float> ret;
            {{&GET_REAL_MAP}}
            return ret;
        }
        std::map<std::string,std::string> {{&CLASS_NAME}}::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> {{&CLASS_NAME}}::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            {{&GET_RAW_MAP}}
            return ret;
        }
    }
}