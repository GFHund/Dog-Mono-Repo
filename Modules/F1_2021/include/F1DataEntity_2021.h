/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____F1_DATA_ENTITY____
#define ____F1_DATA_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>



namespace DogGE{
    namespace F1_2021{
        class F1DataEntity: public DogGE::Database::AbstractEntity{
            private:
            uint16_t packetFormat;
uint8_t gameMajorVersion;
uint8_t gameMinorVersion;
uint8_t packetVersion;
uint8_t packetId;
uint64_t sessionUID;
float sessionTime;
uint32_t frameIdentifier;
uint8_t playerCarIndex;
uint8_t secondaryPlayerCarIndex;
char* packetData;
int packetSize;

            public:
            F1DataEntity();
F1DataEntity(char* rawData,int size);


            void setPacketFormat(uint16_t packetFormat);
void setGameMajorVersion(uint8_t gameMajorVersion);
void setGameMinorVersion(uint8_t gameMinorVersion);
void setPacketVersion(uint8_t packetVersion);
void setPacketId(uint8_t packetId);
void setSessionUID(uint64_t sessionUID);
void setSessionTime(float sessionTime);
void setFrameIdentifier(uint32_t frameIdentifier);
void setPlayerCarIndex(uint8_t playerCarIndex);
void setSecondaryPlayerCarIndex(uint8_t secondaryPlayerCarIndex);
void setPacketData(char* packet,int size);

            uint16_t getPacketFormat();
uint8_t getGameMajorVersion();
uint8_t getGameMinorVersion();
uint8_t getPacketVersion();
uint8_t getPacketId();
uint64_t getSessionUID();
float getSessionTime();
uint32_t getFrameIdentifier();
uint8_t getPlayerCarIndex();
uint8_t getSecondaryPlayerCarIndex();
char* getPacketData();
int getPacketSize();

            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   