/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <DataClass/SessionPackage.h>

namespace DogGE{
    namespace F1_2021{
        Header SessionPackage::getHeader(){return this->header;}
uint8_t SessionPackage::getWeather(){return this->weather;}
int8_t SessionPackage::getTrackTemperature(){return this->trackTemperature;}
int8_t SessionPackage::getAirTemperature(){return this->airTemperature;}
uint8_t SessionPackage::getTotalLaps(){return this->totalLaps;}
uint16_t SessionPackage::getTrackLength(){return this->trackLength;}
uint8_t SessionPackage::getSessionType(){return this->sessionType;}
int8_t SessionPackage::getTrackId(){return this->trackId;}
uint8_t SessionPackage::getFormula(){return this->formula;}
uint16_t SessionPackage::getSessionTimeLeft(){return this->sessionTimeLeft;}
uint16_t SessionPackage::getSessionDuration(){return this->sessionDuration;}
uint8_t SessionPackage::getPitSpeedLimit(){return this->pitSpeedLimit;}
uint8_t SessionPackage::getGamePaused(){return this->gamePaused;}
uint8_t SessionPackage::getIsSpectating(){return this->isSpectating;}
uint8_t SessionPackage::getSpectatorCarIndex(){return this->spectatorCarIndex;}
uint8_t SessionPackage::getSliProNativeSupport(){return this->sliProNativeSupport;}
uint8_t SessionPackage::getNumMarshalZones(){return this->numMarshalZones;}
MarshalZone* SessionPackage::getMarshalZones(){return this->marshalZones;}
uint8_t SessionPackage::getSafetyCarStatus(){return this->safetyCarStatus;}
uint8_t SessionPackage::getNetworkGame(){return this->networkGame;}
uint8_t SessionPackage::getNumWeatherForecastSamples(){return this->numWeatherForecastSamples;}
WeatherForecastSample* SessionPackage::getWeatherForecastSamples(){return this->weatherForecastSamples;}
uint8_t SessionPackage::getForecastAccuracy(){return this->forecastAccuracy;}
uint8_t SessionPackage::getAiDifficulty(){return this->aiDifficulty;}
uint32_t SessionPackage::getSeasonLinkIdentifier(){return this->seasonLinkIdentifier;}
uint32_t SessionPackage::getWeekendLinkIdentifier(){return this->weekendLinkIdentifier;}
uint32_t SessionPackage::getSessionLinkIdentifier(){return this->sessionLinkIdentifier;}
uint8_t SessionPackage::getPitStopWindowIdealLap(){return this->pitStopWindowIdealLap;}
uint8_t SessionPackage::getPitStopWindowLatestLap(){return this->pitStopWindowLatestLap;}
uint8_t SessionPackage::getPitStopRejoinPosition(){return this->pitStopRejoinPosition;}
uint8_t SessionPackage::getSteeringAssist(){return this->steeringAssist;}
uint8_t SessionPackage::getBrakingAssist(){return this->brakingAssist;}
uint8_t SessionPackage::getGearboxAssist(){return this->gearboxAssist;}
uint8_t SessionPackage::getPitAssist(){return this->pitAssist;}
uint8_t SessionPackage::getPitReleaseAssist(){return this->pitReleaseAssist;}
uint8_t SessionPackage::getERSAssist(){return this->ERSAssist;}
uint8_t SessionPackage::getDRSAssist(){return this->DRSAssist;}
uint8_t SessionPackage::getDynamicRacingLine(){return this->dynamicRacingLine;}
uint8_t SessionPackage::getDynamicRacingLineType(){return this->dynamicRacingLineType;}

        void SessionPackage::setHeader(Header header){this->header = header;}
void SessionPackage::setWeather(uint8_t weather){this->weather = weather;}
void SessionPackage::setTrackTemperature(int8_t trackTemperature){this->trackTemperature = trackTemperature;}
void SessionPackage::setAirTemperature(int8_t airTemperature){this->airTemperature = airTemperature;}
void SessionPackage::setTotalLaps(uint8_t totalLaps){this->totalLaps = totalLaps;}
void SessionPackage::setTrackLength(uint16_t trackLength){this->trackLength = trackLength;}
void SessionPackage::setSessionType(uint8_t sessionType){this->sessionType = sessionType;}
void SessionPackage::setTrackId(int8_t trackId){this->trackId = trackId;}
void SessionPackage::setFormula(uint8_t formula){this->formula = formula;}
void SessionPackage::setSessionTimeLeft(uint16_t sessionTimeLeft){this->sessionTimeLeft = sessionTimeLeft;}
void SessionPackage::setSessionDuration(uint16_t sessionDuration){this->sessionDuration = sessionDuration;}
void SessionPackage::setPitSpeedLimit(uint8_t pitSpeedLimit){this->pitSpeedLimit = pitSpeedLimit;}
void SessionPackage::setGamePaused(uint8_t gamePaused){this->gamePaused = gamePaused;}
void SessionPackage::setIsSpectating(uint8_t isSpectating){this->isSpectating = isSpectating;}
void SessionPackage::setSpectatorCarIndex(uint8_t spectatorCarIndex){this->spectatorCarIndex = spectatorCarIndex;}
void SessionPackage::setSliProNativeSupport(uint8_t sliProNativeSupport){this->sliProNativeSupport = sliProNativeSupport;}
void SessionPackage::setNumMarshalZones(uint8_t numMarshalZones){this->numMarshalZones = numMarshalZones;}
void SessionPackage::setMarshalZones(MarshalZone* marshalZones){for(int i=0;i<21;i++){
this->marshalZones[i] = marshalZones[i];
}
}
void SessionPackage::setSafetyCarStatus(uint8_t safetyCarStatus){this->safetyCarStatus = safetyCarStatus;}
void SessionPackage::setNetworkGame(uint8_t networkGame){this->networkGame = networkGame;}
void SessionPackage::setNumWeatherForecastSamples(uint8_t numWeatherForecastSamples){this->numWeatherForecastSamples = numWeatherForecastSamples;}
void SessionPackage::setWeatherForecastSamples(WeatherForecastSample* weatherForecastSamples){for(int i=0;i<1;i++){
this->weatherForecastSamples[i] = weatherForecastSamples[i];
}
}
void SessionPackage::setForecastAccuracy(uint8_t forecastAccuracy){this->forecastAccuracy = forecastAccuracy;}
void SessionPackage::setAiDifficulty(uint8_t aiDifficulty){this->aiDifficulty = aiDifficulty;}
void SessionPackage::setSeasonLinkIdentifier(uint32_t seasonLinkIdentifier){this->seasonLinkIdentifier = seasonLinkIdentifier;}
void SessionPackage::setWeekendLinkIdentifier(uint32_t weekendLinkIdentifier){this->weekendLinkIdentifier = weekendLinkIdentifier;}
void SessionPackage::setSessionLinkIdentifier(uint32_t sessionLinkIdentifier){this->sessionLinkIdentifier = sessionLinkIdentifier;}
void SessionPackage::setPitStopWindowIdealLap(uint8_t pitStopWindowIdealLap){this->pitStopWindowIdealLap = pitStopWindowIdealLap;}
void SessionPackage::setPitStopWindowLatestLap(uint8_t pitStopWindowLatestLap){this->pitStopWindowLatestLap = pitStopWindowLatestLap;}
void SessionPackage::setPitStopRejoinPosition(uint8_t pitStopRejoinPosition){this->pitStopRejoinPosition = pitStopRejoinPosition;}
void SessionPackage::setSteeringAssist(uint8_t steeringAssist){this->steeringAssist = steeringAssist;}
void SessionPackage::setBrakingAssist(uint8_t brakingAssist){this->brakingAssist = brakingAssist;}
void SessionPackage::setGearboxAssist(uint8_t gearboxAssist){this->gearboxAssist = gearboxAssist;}
void SessionPackage::setPitAssist(uint8_t pitAssist){this->pitAssist = pitAssist;}
void SessionPackage::setPitReleaseAssist(uint8_t pitReleaseAssist){this->pitReleaseAssist = pitReleaseAssist;}
void SessionPackage::setERSAssist(uint8_t ERSAssist){this->ERSAssist = ERSAssist;}
void SessionPackage::setDRSAssist(uint8_t DRSAssist){this->DRSAssist = DRSAssist;}
void SessionPackage::setDynamicRacingLine(uint8_t dynamicRacingLine){this->dynamicRacingLine = dynamicRacingLine;}
void SessionPackage::setDynamicRacingLineType(uint8_t dynamicRacingLineType){this->dynamicRacingLineType = dynamicRacingLineType;}

    }
}                    