
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/SessionPackageEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        SessionPackageEntity::SessionPackageEntity(){}
SessionPackageEntity::SessionPackageEntity(char* rawData,int size,int offset){
this->setHeader(HeaderEntity(rawData,size,offset+0));
this->setWeather(*((uint8_t*)(rawData+24)));
this->setTrackTemperature(*((int8_t*)(rawData+25)));
this->setAirTemperature(*((int8_t*)(rawData+26)));
this->setTotalLaps(*((uint8_t*)(rawData+27)));
this->setTrackLength(*((uint16_t*)(rawData+28)));
this->setSessionType(*((uint8_t*)(rawData+30)));
this->setTrackId(*((int8_t*)(rawData+31)));
this->setFormula(*((uint8_t*)(rawData+32)));
this->setSessionTimeLeft(*((uint16_t*)(rawData+33)));
this->setSessionDuration(*((uint16_t*)(rawData+35)));
this->setPitSpeedLimit(*((uint8_t*)(rawData+37)));
this->setGamePaused(*((uint8_t*)(rawData+38)));
this->setIsSpectating(*((uint8_t*)(rawData+39)));
this->setSpectatorCarIndex(*((uint8_t*)(rawData+40)));
this->setSliProNativeSupport(*((uint8_t*)(rawData+41)));
this->setNumMarshalZones(*((uint8_t*)(rawData+42)));
for(int i=0;i<21;i++){this->setMarshalZones(i,MarshalZoneEntity(rawData,size,offset+43+i*5));}
this->setSafetyCarStatus(*((uint8_t*)(rawData+148)));
this->setNetworkGame(*((uint8_t*)(rawData+149)));
this->setNumWeatherForecastSamples(*((uint8_t*)(rawData+150)));
for(int i=0;i<56;i++){this->setWeatherForecastSamples(i,WeatherForecastSampleEntity(rawData,size,offset+151+i*8));}
this->setForecastAccuracy(*((uint8_t*)(rawData+599)));
this->setAiDifficulty(*((uint8_t*)(rawData+600)));
this->setSeasonLinkIdentifier(*((uint32_t*)(rawData+601)));
this->setWeekendLinkIdentifier(*((uint32_t*)(rawData+605)));
this->setSessionLinkIdentifier(*((uint32_t*)(rawData+609)));
this->setPitStopWindowIdealLap(*((uint8_t*)(rawData+613)));
this->setPitStopWindowLatestLap(*((uint8_t*)(rawData+614)));
this->setPitStopRejoinPosition(*((uint8_t*)(rawData+615)));
this->setSteeringAssist(*((uint8_t*)(rawData+616)));
this->setBrakingAssist(*((uint8_t*)(rawData+617)));
this->setGearboxAssist(*((uint8_t*)(rawData+618)));
this->setPitAssist(*((uint8_t*)(rawData+619)));
this->setPitReleaseAssist(*((uint8_t*)(rawData+620)));
this->setERSAssist(*((uint8_t*)(rawData+621)));
this->setDRSAssist(*((uint8_t*)(rawData+622)));
this->setDynamicRacingLine(*((uint8_t*)(rawData+623)));
this->setDynamicRacingLineType(*((uint8_t*)(rawData+624)));
this->setGameMode(*((uint8_t*)(rawData+625)));
this->setRuleSet(*((uint8_t*)(rawData+626)));
this->setTimeOfDay(*((uint32_t*)(rawData+627)));
this->setSessionLength(*((uint8_t*)(rawData+631)));
}

        HeaderEntity SessionPackageEntity::getHeader(){return this->header;}
uint8_t SessionPackageEntity::getWeather(){return this->weather;}
int8_t SessionPackageEntity::getTrackTemperature(){return this->trackTemperature;}
int8_t SessionPackageEntity::getAirTemperature(){return this->airTemperature;}
uint8_t SessionPackageEntity::getTotalLaps(){return this->totalLaps;}
uint16_t SessionPackageEntity::getTrackLength(){return this->trackLength;}
uint8_t SessionPackageEntity::getSessionType(){return this->sessionType;}
int8_t SessionPackageEntity::getTrackId(){return this->trackId;}
uint8_t SessionPackageEntity::getFormula(){return this->formula;}
uint16_t SessionPackageEntity::getSessionTimeLeft(){return this->sessionTimeLeft;}
uint16_t SessionPackageEntity::getSessionDuration(){return this->sessionDuration;}
uint8_t SessionPackageEntity::getPitSpeedLimit(){return this->pitSpeedLimit;}
uint8_t SessionPackageEntity::getGamePaused(){return this->gamePaused;}
uint8_t SessionPackageEntity::getIsSpectating(){return this->isSpectating;}
uint8_t SessionPackageEntity::getSpectatorCarIndex(){return this->spectatorCarIndex;}
uint8_t SessionPackageEntity::getSliProNativeSupport(){return this->sliProNativeSupport;}
uint8_t SessionPackageEntity::getNumMarshalZones(){return this->numMarshalZones;}
MarshalZoneEntity* SessionPackageEntity::getMarshalZones(){return this->marshalZones;}
uint8_t SessionPackageEntity::getSafetyCarStatus(){return this->safetyCarStatus;}
uint8_t SessionPackageEntity::getNetworkGame(){return this->networkGame;}
uint8_t SessionPackageEntity::getNumWeatherForecastSamples(){return this->numWeatherForecastSamples;}
WeatherForecastSampleEntity* SessionPackageEntity::getWeatherForecastSamples(){return this->weatherForecastSamples;}
uint8_t SessionPackageEntity::getForecastAccuracy(){return this->forecastAccuracy;}
uint8_t SessionPackageEntity::getAiDifficulty(){return this->aiDifficulty;}
uint32_t SessionPackageEntity::getSeasonLinkIdentifier(){return this->seasonLinkIdentifier;}
uint32_t SessionPackageEntity::getWeekendLinkIdentifier(){return this->weekendLinkIdentifier;}
uint32_t SessionPackageEntity::getSessionLinkIdentifier(){return this->sessionLinkIdentifier;}
uint8_t SessionPackageEntity::getPitStopWindowIdealLap(){return this->pitStopWindowIdealLap;}
uint8_t SessionPackageEntity::getPitStopWindowLatestLap(){return this->pitStopWindowLatestLap;}
uint8_t SessionPackageEntity::getPitStopRejoinPosition(){return this->pitStopRejoinPosition;}
uint8_t SessionPackageEntity::getSteeringAssist(){return this->steeringAssist;}
uint8_t SessionPackageEntity::getBrakingAssist(){return this->brakingAssist;}
uint8_t SessionPackageEntity::getGearboxAssist(){return this->gearboxAssist;}
uint8_t SessionPackageEntity::getPitAssist(){return this->pitAssist;}
uint8_t SessionPackageEntity::getPitReleaseAssist(){return this->pitReleaseAssist;}
uint8_t SessionPackageEntity::getERSAssist(){return this->ERSAssist;}
uint8_t SessionPackageEntity::getDRSAssist(){return this->DRSAssist;}
uint8_t SessionPackageEntity::getDynamicRacingLine(){return this->dynamicRacingLine;}
uint8_t SessionPackageEntity::getDynamicRacingLineType(){return this->dynamicRacingLineType;}
uint8_t SessionPackageEntity::getGameMode(){return this->gameMode;}
uint8_t SessionPackageEntity::getRuleSet(){return this->ruleSet;}
uint32_t SessionPackageEntity::getTimeOfDay(){return this->timeOfDay;}
uint8_t SessionPackageEntity::getSessionLength(){return this->sessionLength;}

        void SessionPackageEntity::setHeader(HeaderEntity header){this->header = header;}
void SessionPackageEntity::setWeather(uint8_t weather){this->weather = weather;}
void SessionPackageEntity::setTrackTemperature(int8_t trackTemperature){this->trackTemperature = trackTemperature;}
void SessionPackageEntity::setAirTemperature(int8_t airTemperature){this->airTemperature = airTemperature;}
void SessionPackageEntity::setTotalLaps(uint8_t totalLaps){this->totalLaps = totalLaps;}
void SessionPackageEntity::setTrackLength(uint16_t trackLength){this->trackLength = trackLength;}
void SessionPackageEntity::setSessionType(uint8_t sessionType){this->sessionType = sessionType;}
void SessionPackageEntity::setTrackId(int8_t trackId){this->trackId = trackId;}
void SessionPackageEntity::setFormula(uint8_t formula){this->formula = formula;}
void SessionPackageEntity::setSessionTimeLeft(uint16_t sessionTimeLeft){this->sessionTimeLeft = sessionTimeLeft;}
void SessionPackageEntity::setSessionDuration(uint16_t sessionDuration){this->sessionDuration = sessionDuration;}
void SessionPackageEntity::setPitSpeedLimit(uint8_t pitSpeedLimit){this->pitSpeedLimit = pitSpeedLimit;}
void SessionPackageEntity::setGamePaused(uint8_t gamePaused){this->gamePaused = gamePaused;}
void SessionPackageEntity::setIsSpectating(uint8_t isSpectating){this->isSpectating = isSpectating;}
void SessionPackageEntity::setSpectatorCarIndex(uint8_t spectatorCarIndex){this->spectatorCarIndex = spectatorCarIndex;}
void SessionPackageEntity::setSliProNativeSupport(uint8_t sliProNativeSupport){this->sliProNativeSupport = sliProNativeSupport;}
void SessionPackageEntity::setNumMarshalZones(uint8_t numMarshalZones){this->numMarshalZones = numMarshalZones;}
void SessionPackageEntity::setMarshalZones(int i,MarshalZoneEntity marshalZones){this->marshalZones[i] = marshalZones;}
void SessionPackageEntity::setSafetyCarStatus(uint8_t safetyCarStatus){this->safetyCarStatus = safetyCarStatus;}
void SessionPackageEntity::setNetworkGame(uint8_t networkGame){this->networkGame = networkGame;}
void SessionPackageEntity::setNumWeatherForecastSamples(uint8_t numWeatherForecastSamples){this->numWeatherForecastSamples = numWeatherForecastSamples;}
void SessionPackageEntity::setWeatherForecastSamples(int i,WeatherForecastSampleEntity weatherForecastSamples){this->weatherForecastSamples[i] = weatherForecastSamples;}
void SessionPackageEntity::setForecastAccuracy(uint8_t forecastAccuracy){this->forecastAccuracy = forecastAccuracy;}
void SessionPackageEntity::setAiDifficulty(uint8_t aiDifficulty){this->aiDifficulty = aiDifficulty;}
void SessionPackageEntity::setSeasonLinkIdentifier(uint32_t seasonLinkIdentifier){this->seasonLinkIdentifier = seasonLinkIdentifier;}
void SessionPackageEntity::setWeekendLinkIdentifier(uint32_t weekendLinkIdentifier){this->weekendLinkIdentifier = weekendLinkIdentifier;}
void SessionPackageEntity::setSessionLinkIdentifier(uint32_t sessionLinkIdentifier){this->sessionLinkIdentifier = sessionLinkIdentifier;}
void SessionPackageEntity::setPitStopWindowIdealLap(uint8_t pitStopWindowIdealLap){this->pitStopWindowIdealLap = pitStopWindowIdealLap;}
void SessionPackageEntity::setPitStopWindowLatestLap(uint8_t pitStopWindowLatestLap){this->pitStopWindowLatestLap = pitStopWindowLatestLap;}
void SessionPackageEntity::setPitStopRejoinPosition(uint8_t pitStopRejoinPosition){this->pitStopRejoinPosition = pitStopRejoinPosition;}
void SessionPackageEntity::setSteeringAssist(uint8_t steeringAssist){this->steeringAssist = steeringAssist;}
void SessionPackageEntity::setBrakingAssist(uint8_t brakingAssist){this->brakingAssist = brakingAssist;}
void SessionPackageEntity::setGearboxAssist(uint8_t gearboxAssist){this->gearboxAssist = gearboxAssist;}
void SessionPackageEntity::setPitAssist(uint8_t pitAssist){this->pitAssist = pitAssist;}
void SessionPackageEntity::setPitReleaseAssist(uint8_t pitReleaseAssist){this->pitReleaseAssist = pitReleaseAssist;}
void SessionPackageEntity::setERSAssist(uint8_t ERSAssist){this->ERSAssist = ERSAssist;}
void SessionPackageEntity::setDRSAssist(uint8_t DRSAssist){this->DRSAssist = DRSAssist;}
void SessionPackageEntity::setDynamicRacingLine(uint8_t dynamicRacingLine){this->dynamicRacingLine = dynamicRacingLine;}
void SessionPackageEntity::setDynamicRacingLineType(uint8_t dynamicRacingLineType){this->dynamicRacingLineType = dynamicRacingLineType;}
void SessionPackageEntity::setGameMode(uint8_t gameMode){this->gameMode = gameMode;}
void SessionPackageEntity::setRuleSet(uint8_t ruleSet){this->ruleSet = ruleSet;}
void SessionPackageEntity::setTimeOfDay(uint32_t timeOfDay){this->timeOfDay = timeOfDay;}
void SessionPackageEntity::setSessionLength(uint8_t sessionLength){this->sessionLength = sessionLength;}


        std::string SessionPackageEntity::getTableName(){
            return "SessionPackageEntity";
        }
        std::string SessionPackageEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS SessionPackageEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`header` REAL,`weather` INTEGER,`trackTemperature` INTEGER,`airTemperature` INTEGER,`totalLaps` INTEGER,`trackLength` INTEGER,`sessionType` INTEGER,`trackId` INTEGER,`formula` INTEGER,`sessionTimeLeft` INTEGER,`sessionDuration` INTEGER,`pitSpeedLimit` INTEGER,`gamePaused` INTEGER,`isSpectating` INTEGER,`spectatorCarIndex` INTEGER,`sliProNativeSupport` INTEGER,`numMarshalZones` INTEGER,`marshalZones` INTEGER,`safetyCarStatus` INTEGER,`networkGame` INTEGER,`numWeatherForecastSamples` INTEGER,`weatherForecastSamples` INTEGER,`forecastAccuracy` INTEGER,`aiDifficulty` INTEGER,`seasonLinkIdentifier` INTEGER,`weekendLinkIdentifier` INTEGER,`sessionLinkIdentifier` INTEGER,`pitStopWindowIdealLap` INTEGER,`pitStopWindowLatestLap` INTEGER,`pitStopRejoinPosition` INTEGER,`steeringAssist` INTEGER,`brakingAssist` INTEGER,`gearboxAssist` INTEGER,`pitAssist` INTEGER,`pitReleaseAssist` INTEGER,`ERSAssist` INTEGER,`DRSAssist` INTEGER,`dynamicRacingLine` INTEGER,`dynamicRacingLineType` INTEGER,`gameMode` INTEGER,`ruleSet` INTEGER,`timeOfDay` INTEGER,`sessionLength` INTEGER)";
        }
        
        void SessionPackageEntity::matchIntData(std::string column,int data){
            if(column.compare("trackTemperature") == 0){
this->setTrackTemperature(data);
} else if(column.compare("airTemperature") == 0){
this->setAirTemperature(data);
} else if(column.compare("trackId") == 0){
this->setTrackId(data);
} else {DogGE::Database::AbstractEntity::matchIntData(column,data);}

        }
        void SessionPackageEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void SessionPackageEntity::matchRealData(std::string column,float data){
            
        }
        void SessionPackageEntity::matchStringData(std::string column,std::string data){}
        void SessionPackageEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> SessionPackageEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            ret.insert(std::pair<std::string,int>("trackTemperature",this->getTrackTemperature()));
ret.insert(std::pair<std::string,int>("airTemperature",this->getAirTemperature()));
ret.insert(std::pair<std::string,int>("trackId",this->getTrackId()));

            return ret;
        }
        std::map<std::string,int64_t> SessionPackageEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> SessionPackageEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> SessionPackageEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> SessionPackageEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        