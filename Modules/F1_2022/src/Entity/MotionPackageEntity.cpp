
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/MotionPackageEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        MotionPackageEntity::MotionPackageEntity(){}
MotionPackageEntity::MotionPackageEntity(char* rawData,int size,int offset){
this->setHeader(HeaderEntity(rawData,size,offset+0));
for(int i=0;i<22;i++){this->setCarMotionData(i,CarMotionDataEntity(rawData,size,offset+24+i*60));}
for(int i=0;i<4;i++){this->setSuspensionPosition(i,*((float*)(rawData+1344)));}
for(int i=0;i<4;i++){this->setSuspensionVelocity(i,*((float*)(rawData+1348)));}
for(int i=0;i<4;i++){this->setSuspensionAcceleration(i,*((float*)(rawData+1352)));}
for(int i=0;i<4;i++){this->setWheelSpeed(i,*((float*)(rawData+1356)));}
for(int i=0;i<4;i++){this->setWheelSlip(i,*((float*)(rawData+1360)));}
this->setLocalVelocityX(*((float*)(rawData+1364)));
this->setLocalVelocityY(*((float*)(rawData+1368)));
this->setLocalVelocityZ(*((float*)(rawData+1372)));
this->setAngularVelocityX(*((float*)(rawData+1376)));
this->setAngularVelocityY(*((float*)(rawData+1380)));
this->setAngularVelocityZ(*((float*)(rawData+1384)));
this->setAngularAccelerationX(*((float*)(rawData+1388)));
this->setAngularAccelerationY(*((float*)(rawData+1392)));
this->setAngularAccelerationZ(*((float*)(rawData+1396)));
this->setFrontWheelsAngle(*((float*)(rawData+1400)));
}

        HeaderEntity MotionPackageEntity::getHeader(){return this->header;}
CarMotionDataEntity* MotionPackageEntity::getCarMotionData(){return this->carMotionData;}
float* MotionPackageEntity::getSuspensionPosition(){return this->suspensionPosition;}
float* MotionPackageEntity::getSuspensionVelocity(){return this->suspensionVelocity;}
float* MotionPackageEntity::getSuspensionAcceleration(){return this->suspensionAcceleration;}
float* MotionPackageEntity::getWheelSpeed(){return this->wheelSpeed;}
float* MotionPackageEntity::getWheelSlip(){return this->wheelSlip;}
float MotionPackageEntity::getLocalVelocityX(){return this->localVelocityX;}
float MotionPackageEntity::getLocalVelocityY(){return this->localVelocityY;}
float MotionPackageEntity::getLocalVelocityZ(){return this->localVelocityZ;}
float MotionPackageEntity::getAngularVelocityX(){return this->angularVelocityX;}
float MotionPackageEntity::getAngularVelocityY(){return this->angularVelocityY;}
float MotionPackageEntity::getAngularVelocityZ(){return this->angularVelocityZ;}
float MotionPackageEntity::getAngularAccelerationX(){return this->angularAccelerationX;}
float MotionPackageEntity::getAngularAccelerationY(){return this->angularAccelerationY;}
float MotionPackageEntity::getAngularAccelerationZ(){return this->angularAccelerationZ;}
float MotionPackageEntity::getFrontWheelsAngle(){return this->frontWheelsAngle;}

        void MotionPackageEntity::setHeader(HeaderEntity header){this->header = header;}
void MotionPackageEntity::setCarMotionData(int i,CarMotionDataEntity carMotionData){this->carMotionData[i] = carMotionData;}
void MotionPackageEntity::setSuspensionPosition(int i,float suspensionPosition){this->suspensionPosition[i] = suspensionPosition;}
void MotionPackageEntity::setSuspensionVelocity(int i,float suspensionVelocity){this->suspensionVelocity[i] = suspensionVelocity;}
void MotionPackageEntity::setSuspensionAcceleration(int i,float suspensionAcceleration){this->suspensionAcceleration[i] = suspensionAcceleration;}
void MotionPackageEntity::setWheelSpeed(int i,float wheelSpeed){this->wheelSpeed[i] = wheelSpeed;}
void MotionPackageEntity::setWheelSlip(int i,float wheelSlip){this->wheelSlip[i] = wheelSlip;}
void MotionPackageEntity::setLocalVelocityX(float localVelocityX){this->localVelocityX = localVelocityX;}
void MotionPackageEntity::setLocalVelocityY(float localVelocityY){this->localVelocityY = localVelocityY;}
void MotionPackageEntity::setLocalVelocityZ(float localVelocityZ){this->localVelocityZ = localVelocityZ;}
void MotionPackageEntity::setAngularVelocityX(float angularVelocityX){this->angularVelocityX = angularVelocityX;}
void MotionPackageEntity::setAngularVelocityY(float angularVelocityY){this->angularVelocityY = angularVelocityY;}
void MotionPackageEntity::setAngularVelocityZ(float angularVelocityZ){this->angularVelocityZ = angularVelocityZ;}
void MotionPackageEntity::setAngularAccelerationX(float angularAccelerationX){this->angularAccelerationX = angularAccelerationX;}
void MotionPackageEntity::setAngularAccelerationY(float angularAccelerationY){this->angularAccelerationY = angularAccelerationY;}
void MotionPackageEntity::setAngularAccelerationZ(float angularAccelerationZ){this->angularAccelerationZ = angularAccelerationZ;}
void MotionPackageEntity::setFrontWheelsAngle(float frontWheelsAngle){this->frontWheelsAngle = frontWheelsAngle;}


        std::string MotionPackageEntity::getTableName(){
            return "MotionPackageEntity";
        }
        std::string MotionPackageEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS MotionPackageEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`header` REAL,`carMotionData` INTEGER,`suspensionPosition` INTEGER,`suspensionVelocity` INTEGER,`suspensionAcceleration` INTEGER,`wheelSpeed` INTEGER,`wheelSlip` INTEGER,`localVelocityX` REAL,`localVelocityY` REAL,`localVelocityZ` REAL,`angularVelocityX` REAL,`angularVelocityY` REAL,`angularVelocityZ` REAL,`angularAccelerationX` REAL,`angularAccelerationY` REAL,`angularAccelerationZ` REAL,`frontWheelsAngle` REAL)";
        }
        
        void MotionPackageEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void MotionPackageEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void MotionPackageEntity::matchRealData(std::string column,float data){
            if(column.compare("localVelocityX") == 0){
this->setLocalVelocityX(data);
} else if(column.compare("localVelocityY") == 0){
this->setLocalVelocityY(data);
} else if(column.compare("localVelocityZ") == 0){
this->setLocalVelocityZ(data);
} else if(column.compare("angularVelocityX") == 0){
this->setAngularVelocityX(data);
} else if(column.compare("angularVelocityY") == 0){
this->setAngularVelocityY(data);
} else if(column.compare("angularVelocityZ") == 0){
this->setAngularVelocityZ(data);
} else if(column.compare("angularAccelerationX") == 0){
this->setAngularAccelerationX(data);
} else if(column.compare("angularAccelerationY") == 0){
this->setAngularAccelerationY(data);
} else if(column.compare("angularAccelerationZ") == 0){
this->setAngularAccelerationZ(data);
} else if(column.compare("frontWheelsAngle") == 0){
this->setFrontWheelsAngle(data);
}
        }
        void MotionPackageEntity::matchStringData(std::string column,std::string data){}
        void MotionPackageEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> MotionPackageEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> MotionPackageEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> MotionPackageEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("localVelocityX",this->getLocalVelocityX()));ret.insert(std::pair<std::string,float>("localVelocityY",this->getLocalVelocityY()));ret.insert(std::pair<std::string,float>("localVelocityZ",this->getLocalVelocityZ()));ret.insert(std::pair<std::string,float>("angularVelocityX",this->getAngularVelocityX()));ret.insert(std::pair<std::string,float>("angularVelocityY",this->getAngularVelocityY()));ret.insert(std::pair<std::string,float>("angularVelocityZ",this->getAngularVelocityZ()));ret.insert(std::pair<std::string,float>("angularAccelerationX",this->getAngularAccelerationX()));ret.insert(std::pair<std::string,float>("angularAccelerationY",this->getAngularAccelerationY()));ret.insert(std::pair<std::string,float>("angularAccelerationZ",this->getAngularAccelerationZ()));ret.insert(std::pair<std::string,float>("frontWheelsAngle",this->getFrontWheelsAngle()));
            return ret;
        }
        std::map<std::string,std::string> MotionPackageEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> MotionPackageEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        