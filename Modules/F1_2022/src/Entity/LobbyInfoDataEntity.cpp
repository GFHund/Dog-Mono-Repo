
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/LobbyInfoDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        LobbyInfoDataEntity::LobbyInfoDataEntity(){}
LobbyInfoDataEntity::LobbyInfoDataEntity(char* rawData,int size,int offset){
this->setAiControlled(*((uint8_t*)(rawData+0)));
this->setTeamId(*((uint8_t*)(rawData+1)));
this->setNationality(*((uint8_t*)(rawData+2)));
for(int i=0;i<48;i++){this->setName(i,*((char*)(rawData+3)));}
this->setCarNumber(*((uint8_t*)(rawData+51)));
this->setReadyStatus(*((uint8_t*)(rawData+52)));
}

        uint8_t LobbyInfoDataEntity::getAiControlled(){return this->aiControlled;}
uint8_t LobbyInfoDataEntity::getTeamId(){return this->teamId;}
uint8_t LobbyInfoDataEntity::getNationality(){return this->nationality;}
char* LobbyInfoDataEntity::getName(){return this->name;}
uint8_t LobbyInfoDataEntity::getCarNumber(){return this->carNumber;}
uint8_t LobbyInfoDataEntity::getReadyStatus(){return this->readyStatus;}

        void LobbyInfoDataEntity::setAiControlled(uint8_t aiControlled){this->aiControlled = aiControlled;}
void LobbyInfoDataEntity::setTeamId(uint8_t teamId){this->teamId = teamId;}
void LobbyInfoDataEntity::setNationality(uint8_t nationality){this->nationality = nationality;}
void LobbyInfoDataEntity::setName(int i,char name){this->name[i] = name;}
void LobbyInfoDataEntity::setCarNumber(uint8_t carNumber){this->carNumber = carNumber;}
void LobbyInfoDataEntity::setReadyStatus(uint8_t readyStatus){this->readyStatus = readyStatus;}


        std::string LobbyInfoDataEntity::getTableName(){
            return "LobbyInfoDataEntity";
        }
        std::string LobbyInfoDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS LobbyInfoDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`aiControlled` INTEGER,`teamId` INTEGER,`nationality` INTEGER,`name` INTEGER,`carNumber` INTEGER,`readyStatus` INTEGER)";
        }
        
        void LobbyInfoDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void LobbyInfoDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void LobbyInfoDataEntity::matchRealData(std::string column,float data){
            
        }
        void LobbyInfoDataEntity::matchStringData(std::string column,std::string data){}
        void LobbyInfoDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> LobbyInfoDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> LobbyInfoDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> LobbyInfoDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> LobbyInfoDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> LobbyInfoDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        