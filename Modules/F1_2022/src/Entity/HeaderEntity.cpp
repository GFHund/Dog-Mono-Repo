
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/HeaderEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        HeaderEntity::HeaderEntity(){}
HeaderEntity::HeaderEntity(char* rawData,int size,int offset){
this->setPacketFormat(*((uint16_t*)(rawData+0)));
if(this->getPacketFormat() != 2022){throw ValidationException();}
this->setGameMajorVersion(*((uint8_t*)(rawData+2)));
this->setGameMinorVersion(*((uint8_t*)(rawData+3)));
this->setPacketVersion(*((uint8_t*)(rawData+4)));
this->setPacketId(*((uint8_t*)(rawData+5)));
this->setSessionUID(*((uint64_t*)(rawData+6)));
this->setSessionTime(*((float*)(rawData+14)));
this->setFrameIdentifier(*((uint32_t*)(rawData+18)));
this->setPlayerCarIndex(*((uint8_t*)(rawData+22)));
this->setSecondaryPlayerCarIndex(*((uint8_t*)(rawData+23)));
}

        uint16_t HeaderEntity::getPacketFormat(){return this->packetFormat;}
uint8_t HeaderEntity::getGameMajorVersion(){return this->gameMajorVersion;}
uint8_t HeaderEntity::getGameMinorVersion(){return this->gameMinorVersion;}
uint8_t HeaderEntity::getPacketVersion(){return this->packetVersion;}
uint8_t HeaderEntity::getPacketId(){return this->packetId;}
uint64_t HeaderEntity::getSessionUID(){return this->sessionUID;}
float HeaderEntity::getSessionTime(){return this->sessionTime;}
uint32_t HeaderEntity::getFrameIdentifier(){return this->frameIdentifier;}
uint8_t HeaderEntity::getPlayerCarIndex(){return this->playerCarIndex;}
uint8_t HeaderEntity::getSecondaryPlayerCarIndex(){return this->secondaryPlayerCarIndex;}

        void HeaderEntity::setPacketFormat(uint16_t packetFormat){this->packetFormat = packetFormat;}
void HeaderEntity::setGameMajorVersion(uint8_t gameMajorVersion){this->gameMajorVersion = gameMajorVersion;}
void HeaderEntity::setGameMinorVersion(uint8_t gameMinorVersion){this->gameMinorVersion = gameMinorVersion;}
void HeaderEntity::setPacketVersion(uint8_t packetVersion){this->packetVersion = packetVersion;}
void HeaderEntity::setPacketId(uint8_t packetId){this->packetId = packetId;}
void HeaderEntity::setSessionUID(uint64_t sessionUID){this->sessionUID = sessionUID;}
void HeaderEntity::setSessionTime(float sessionTime){this->sessionTime = sessionTime;}
void HeaderEntity::setFrameIdentifier(uint32_t frameIdentifier){this->frameIdentifier = frameIdentifier;}
void HeaderEntity::setPlayerCarIndex(uint8_t playerCarIndex){this->playerCarIndex = playerCarIndex;}
void HeaderEntity::setSecondaryPlayerCarIndex(uint8_t secondaryPlayerCarIndex){this->secondaryPlayerCarIndex = secondaryPlayerCarIndex;}


        std::string HeaderEntity::getTableName(){
            return "HeaderEntity";
        }
        std::string HeaderEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS HeaderEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`packetFormat` INTEGER,`gameMajorVersion` INTEGER,`gameMinorVersion` INTEGER,`packetVersion` INTEGER,`packetId` INTEGER,`sessionUID` BIGINT,`sessionTime` REAL,`frameIdentifier` INTEGER,`playerCarIndex` INTEGER,`secondaryPlayerCarIndex` INTEGER)";
        }
        
        void HeaderEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void HeaderEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void HeaderEntity::matchRealData(std::string column,float data){
            if(column.compare("sessionTime") == 0){
this->setSessionTime(data);
}
        }
        void HeaderEntity::matchStringData(std::string column,std::string data){}
        void HeaderEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> HeaderEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> HeaderEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> HeaderEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("sessionTime",this->getSessionTime()));
            return ret;
        }
        std::map<std::string,std::string> HeaderEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> HeaderEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        