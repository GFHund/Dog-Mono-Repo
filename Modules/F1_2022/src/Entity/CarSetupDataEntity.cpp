
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/CarSetupDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        CarSetupDataEntity::CarSetupDataEntity(){}
CarSetupDataEntity::CarSetupDataEntity(char* rawData,int size,int offset){
this->setFrontWing(*((uint8_t*)(rawData+0)));
this->setRearWing(*((uint8_t*)(rawData+1)));
this->setOnThrottle(*((uint8_t*)(rawData+2)));
this->setOffThrottle(*((uint8_t*)(rawData+3)));
this->setFrontCamber(*((float*)(rawData+4)));
this->setRearCamber(*((float*)(rawData+8)));
this->setFrontToe(*((float*)(rawData+12)));
this->setRearToe(*((float*)(rawData+16)));
this->setFrontSuspension(*((uint8_t*)(rawData+20)));
this->setRearSuspension(*((uint8_t*)(rawData+21)));
this->setFrontAntiRollBar(*((uint8_t*)(rawData+22)));
this->setRearAntiRollBar(*((uint8_t*)(rawData+23)));
this->setFrontSuspensionHeight(*((uint8_t*)(rawData+24)));
this->setRearSuspensionHeight(*((uint8_t*)(rawData+25)));
this->setBreakePressure(*((uint8_t*)(rawData+26)));
this->setBreakeBias(*((uint8_t*)(rawData+27)));
this->setRearLeftTyrePressure(*((float*)(rawData+28)));
this->setRearRightTyrePressure(*((float*)(rawData+32)));
this->setFrontLeftTyrePressure(*((float*)(rawData+36)));
this->setFrontRightTyrePressure(*((float*)(rawData+40)));
this->setBallast(*((uint8_t*)(rawData+44)));
this->setFuelLoad(*((float*)(rawData+45)));
}

        uint8_t CarSetupDataEntity::getFrontWing(){return this->frontWing;}
uint8_t CarSetupDataEntity::getRearWing(){return this->rearWing;}
uint8_t CarSetupDataEntity::getOnThrottle(){return this->onThrottle;}
uint8_t CarSetupDataEntity::getOffThrottle(){return this->offThrottle;}
float CarSetupDataEntity::getFrontCamber(){return this->frontCamber;}
float CarSetupDataEntity::getRearCamber(){return this->rearCamber;}
float CarSetupDataEntity::getFrontToe(){return this->frontToe;}
float CarSetupDataEntity::getRearToe(){return this->rearToe;}
uint8_t CarSetupDataEntity::getFrontSuspension(){return this->frontSuspension;}
uint8_t CarSetupDataEntity::getRearSuspension(){return this->rearSuspension;}
uint8_t CarSetupDataEntity::getFrontAntiRollBar(){return this->frontAntiRollBar;}
uint8_t CarSetupDataEntity::getRearAntiRollBar(){return this->rearAntiRollBar;}
uint8_t CarSetupDataEntity::getFrontSuspensionHeight(){return this->frontSuspensionHeight;}
uint8_t CarSetupDataEntity::getRearSuspensionHeight(){return this->rearSuspensionHeight;}
uint8_t CarSetupDataEntity::getBreakePressure(){return this->breakePressure;}
uint8_t CarSetupDataEntity::getBreakeBias(){return this->breakeBias;}
float CarSetupDataEntity::getRearLeftTyrePressure(){return this->rearLeftTyrePressure;}
float CarSetupDataEntity::getRearRightTyrePressure(){return this->rearRightTyrePressure;}
float CarSetupDataEntity::getFrontLeftTyrePressure(){return this->frontLeftTyrePressure;}
float CarSetupDataEntity::getFrontRightTyrePressure(){return this->frontRightTyrePressure;}
uint8_t CarSetupDataEntity::getBallast(){return this->ballast;}
float CarSetupDataEntity::getFuelLoad(){return this->fuelLoad;}

        void CarSetupDataEntity::setFrontWing(uint8_t frontWing){this->frontWing = frontWing;}
void CarSetupDataEntity::setRearWing(uint8_t rearWing){this->rearWing = rearWing;}
void CarSetupDataEntity::setOnThrottle(uint8_t onThrottle){this->onThrottle = onThrottle;}
void CarSetupDataEntity::setOffThrottle(uint8_t offThrottle){this->offThrottle = offThrottle;}
void CarSetupDataEntity::setFrontCamber(float frontCamber){this->frontCamber = frontCamber;}
void CarSetupDataEntity::setRearCamber(float rearCamber){this->rearCamber = rearCamber;}
void CarSetupDataEntity::setFrontToe(float frontToe){this->frontToe = frontToe;}
void CarSetupDataEntity::setRearToe(float rearToe){this->rearToe = rearToe;}
void CarSetupDataEntity::setFrontSuspension(uint8_t frontSuspension){this->frontSuspension = frontSuspension;}
void CarSetupDataEntity::setRearSuspension(uint8_t rearSuspension){this->rearSuspension = rearSuspension;}
void CarSetupDataEntity::setFrontAntiRollBar(uint8_t frontAntiRollBar){this->frontAntiRollBar = frontAntiRollBar;}
void CarSetupDataEntity::setRearAntiRollBar(uint8_t rearAntiRollBar){this->rearAntiRollBar = rearAntiRollBar;}
void CarSetupDataEntity::setFrontSuspensionHeight(uint8_t frontSuspensionHeight){this->frontSuspensionHeight = frontSuspensionHeight;}
void CarSetupDataEntity::setRearSuspensionHeight(uint8_t rearSuspensionHeight){this->rearSuspensionHeight = rearSuspensionHeight;}
void CarSetupDataEntity::setBreakePressure(uint8_t breakePressure){this->breakePressure = breakePressure;}
void CarSetupDataEntity::setBreakeBias(uint8_t breakeBias){this->breakeBias = breakeBias;}
void CarSetupDataEntity::setRearLeftTyrePressure(float rearLeftTyrePressure){this->rearLeftTyrePressure = rearLeftTyrePressure;}
void CarSetupDataEntity::setRearRightTyrePressure(float rearRightTyrePressure){this->rearRightTyrePressure = rearRightTyrePressure;}
void CarSetupDataEntity::setFrontLeftTyrePressure(float frontLeftTyrePressure){this->frontLeftTyrePressure = frontLeftTyrePressure;}
void CarSetupDataEntity::setFrontRightTyrePressure(float frontRightTyrePressure){this->frontRightTyrePressure = frontRightTyrePressure;}
void CarSetupDataEntity::setBallast(uint8_t ballast){this->ballast = ballast;}
void CarSetupDataEntity::setFuelLoad(float fuelLoad){this->fuelLoad = fuelLoad;}


        std::string CarSetupDataEntity::getTableName(){
            return "CarSetupDataEntity";
        }
        std::string CarSetupDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS CarSetupDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`frontWing` INTEGER,`rearWing` INTEGER,`onThrottle` INTEGER,`offThrottle` INTEGER,`frontCamber` REAL,`rearCamber` REAL,`frontToe` REAL,`rearToe` REAL,`frontSuspension` INTEGER,`rearSuspension` INTEGER,`frontAntiRollBar` INTEGER,`rearAntiRollBar` INTEGER,`frontSuspensionHeight` INTEGER,`rearSuspensionHeight` INTEGER,`breakePressure` INTEGER,`breakeBias` INTEGER,`rearLeftTyrePressure` REAL,`rearRightTyrePressure` REAL,`frontLeftTyrePressure` REAL,`frontRightTyrePressure` REAL,`ballast` INTEGER,`fuelLoad` REAL)";
        }
        
        void CarSetupDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void CarSetupDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void CarSetupDataEntity::matchRealData(std::string column,float data){
            if(column.compare("frontCamber") == 0){
this->setFrontCamber(data);
} else if(column.compare("rearCamber") == 0){
this->setRearCamber(data);
} else if(column.compare("frontToe") == 0){
this->setFrontToe(data);
} else if(column.compare("rearToe") == 0){
this->setRearToe(data);
} else if(column.compare("rearLeftTyrePressure") == 0){
this->setRearLeftTyrePressure(data);
} else if(column.compare("rearRightTyrePressure") == 0){
this->setRearRightTyrePressure(data);
} else if(column.compare("frontLeftTyrePressure") == 0){
this->setFrontLeftTyrePressure(data);
} else if(column.compare("frontRightTyrePressure") == 0){
this->setFrontRightTyrePressure(data);
} else if(column.compare("fuelLoad") == 0){
this->setFuelLoad(data);
}
        }
        void CarSetupDataEntity::matchStringData(std::string column,std::string data){}
        void CarSetupDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> CarSetupDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> CarSetupDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> CarSetupDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("frontCamber",this->getFrontCamber()));ret.insert(std::pair<std::string,float>("rearCamber",this->getRearCamber()));ret.insert(std::pair<std::string,float>("frontToe",this->getFrontToe()));ret.insert(std::pair<std::string,float>("rearToe",this->getRearToe()));ret.insert(std::pair<std::string,float>("rearLeftTyrePressure",this->getRearLeftTyrePressure()));ret.insert(std::pair<std::string,float>("rearRightTyrePressure",this->getRearRightTyrePressure()));ret.insert(std::pair<std::string,float>("frontLeftTyrePressure",this->getFrontLeftTyrePressure()));ret.insert(std::pair<std::string,float>("frontRightTyrePressure",this->getFrontRightTyrePressure()));ret.insert(std::pair<std::string,float>("fuelLoad",this->getFuelLoad()));
            return ret;
        }
        std::map<std::string,std::string> CarSetupDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> CarSetupDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        