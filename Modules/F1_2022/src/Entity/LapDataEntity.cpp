
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/LapDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        LapDataEntity::LapDataEntity(){}
LapDataEntity::LapDataEntity(char* rawData,int size,int offset){
this->setLastLapTimeInMs(*((uint32_t*)(rawData+0)));
this->setCurrentLapTimeInMs(*((uint32_t*)(rawData+4)));
this->setSector1TimeInMs(*((uint16_t*)(rawData+8)));
this->setSector2TimeInMs(*((uint16_t*)(rawData+10)));
this->setLapDistance(*((float*)(rawData+12)));
this->setTotalDistance(*((float*)(rawData+16)));
this->setSafetyCarDelta(*((float*)(rawData+20)));
this->setCarPosition(*((uint8_t*)(rawData+24)));
this->setCurrentLapNum(*((uint8_t*)(rawData+25)));
this->setPitStatus(*((uint8_t*)(rawData+26)));
this->setNumPitStops(*((uint8_t*)(rawData+27)));
this->setSector(*((uint8_t*)(rawData+28)));
this->setCurrentLapInvalid(*((uint8_t*)(rawData+29)));
this->setPenalties(*((uint8_t*)(rawData+30)));
this->setWarnings(*((uint8_t*)(rawData+31)));
this->setNumUnservedDriveThroughPens(*((uint8_t*)(rawData+32)));
this->setNumUnservedStopGoPens(*((uint8_t*)(rawData+33)));
this->setGridPosition(*((uint8_t*)(rawData+34)));
this->setDriverStatus(*((uint8_t*)(rawData+35)));
this->setResultStatus(*((uint8_t*)(rawData+36)));
this->setPitLaneTimerActive(*((uint8_t*)(rawData+37)));
this->setPitLaneTimerInLaneInMS(*((uint16_t*)(rawData+38)));
this->setPitStopTimerInMS(*((uint16_t*)(rawData+40)));
this->setPitStopShouldServePen(*((uint8_t*)(rawData+42)));
}

        uint32_t LapDataEntity::getLastLapTimeInMs(){return this->lastLapTimeInMs;}
uint32_t LapDataEntity::getCurrentLapTimeInMs(){return this->currentLapTimeInMs;}
uint16_t LapDataEntity::getSector1TimeInMs(){return this->sector1TimeInMs;}
uint16_t LapDataEntity::getSector2TimeInMs(){return this->sector2TimeInMs;}
float LapDataEntity::getLapDistance(){return this->lapDistance;}
float LapDataEntity::getTotalDistance(){return this->totalDistance;}
float LapDataEntity::getSafetyCarDelta(){return this->safetyCarDelta;}
uint8_t LapDataEntity::getCarPosition(){return this->carPosition;}
uint8_t LapDataEntity::getCurrentLapNum(){return this->currentLapNum;}
uint8_t LapDataEntity::getPitStatus(){return this->pitStatus;}
uint8_t LapDataEntity::getNumPitStops(){return this->numPitStops;}
uint8_t LapDataEntity::getSector(){return this->sector;}
uint8_t LapDataEntity::getCurrentLapInvalid(){return this->currentLapInvalid;}
uint8_t LapDataEntity::getPenalties(){return this->penalties;}
uint8_t LapDataEntity::getWarnings(){return this->warnings;}
uint8_t LapDataEntity::getNumUnservedDriveThroughPens(){return this->numUnservedDriveThroughPens;}
uint8_t LapDataEntity::getNumUnservedStopGoPens(){return this->numUnservedStopGoPens;}
uint8_t LapDataEntity::getGridPosition(){return this->gridPosition;}
uint8_t LapDataEntity::getDriverStatus(){return this->driverStatus;}
uint8_t LapDataEntity::getResultStatus(){return this->resultStatus;}
uint8_t LapDataEntity::getPitLaneTimerActive(){return this->pitLaneTimerActive;}
uint16_t LapDataEntity::getPitLaneTimerInLaneInMS(){return this->pitLaneTimerInLaneInMS;}
uint16_t LapDataEntity::getPitStopTimerInMS(){return this->pitStopTimerInMS;}
uint8_t LapDataEntity::getPitStopShouldServePen(){return this->pitStopShouldServePen;}

        void LapDataEntity::setLastLapTimeInMs(uint32_t lastLapTimeInMs){this->lastLapTimeInMs = lastLapTimeInMs;}
void LapDataEntity::setCurrentLapTimeInMs(uint32_t currentLapTimeInMs){this->currentLapTimeInMs = currentLapTimeInMs;}
void LapDataEntity::setSector1TimeInMs(uint16_t sector1TimeInMs){this->sector1TimeInMs = sector1TimeInMs;}
void LapDataEntity::setSector2TimeInMs(uint16_t sector2TimeInMs){this->sector2TimeInMs = sector2TimeInMs;}
void LapDataEntity::setLapDistance(float lapDistance){this->lapDistance = lapDistance;}
void LapDataEntity::setTotalDistance(float totalDistance){this->totalDistance = totalDistance;}
void LapDataEntity::setSafetyCarDelta(float safetyCarDelta){this->safetyCarDelta = safetyCarDelta;}
void LapDataEntity::setCarPosition(uint8_t carPosition){this->carPosition = carPosition;}
void LapDataEntity::setCurrentLapNum(uint8_t currentLapNum){this->currentLapNum = currentLapNum;}
void LapDataEntity::setPitStatus(uint8_t pitStatus){this->pitStatus = pitStatus;}
void LapDataEntity::setNumPitStops(uint8_t numPitStops){this->numPitStops = numPitStops;}
void LapDataEntity::setSector(uint8_t sector){this->sector = sector;}
void LapDataEntity::setCurrentLapInvalid(uint8_t currentLapInvalid){this->currentLapInvalid = currentLapInvalid;}
void LapDataEntity::setPenalties(uint8_t penalties){this->penalties = penalties;}
void LapDataEntity::setWarnings(uint8_t warnings){this->warnings = warnings;}
void LapDataEntity::setNumUnservedDriveThroughPens(uint8_t numUnservedDriveThroughPens){this->numUnservedDriveThroughPens = numUnservedDriveThroughPens;}
void LapDataEntity::setNumUnservedStopGoPens(uint8_t numUnservedStopGoPens){this->numUnservedStopGoPens = numUnservedStopGoPens;}
void LapDataEntity::setGridPosition(uint8_t gridPosition){this->gridPosition = gridPosition;}
void LapDataEntity::setDriverStatus(uint8_t driverStatus){this->driverStatus = driverStatus;}
void LapDataEntity::setResultStatus(uint8_t resultStatus){this->resultStatus = resultStatus;}
void LapDataEntity::setPitLaneTimerActive(uint8_t pitLaneTimerActive){this->pitLaneTimerActive = pitLaneTimerActive;}
void LapDataEntity::setPitLaneTimerInLaneInMS(uint16_t pitLaneTimerInLaneInMS){this->pitLaneTimerInLaneInMS = pitLaneTimerInLaneInMS;}
void LapDataEntity::setPitStopTimerInMS(uint16_t pitStopTimerInMS){this->pitStopTimerInMS = pitStopTimerInMS;}
void LapDataEntity::setPitStopShouldServePen(uint8_t pitStopShouldServePen){this->pitStopShouldServePen = pitStopShouldServePen;}


        std::string LapDataEntity::getTableName(){
            return "LapDataEntity";
        }
        std::string LapDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS LapDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`lastLapTimeInMs` INTEGER,`currentLapTimeInMs` INTEGER,`sector1TimeInMs` INTEGER,`sector2TimeInMs` INTEGER,`lapDistance` REAL,`totalDistance` REAL,`safetyCarDelta` REAL,`carPosition` INTEGER,`currentLapNum` INTEGER,`pitStatus` INTEGER,`numPitStops` INTEGER,`sector` INTEGER,`currentLapInvalid` INTEGER,`penalties` INTEGER,`warnings` INTEGER,`numUnservedDriveThroughPens` INTEGER,`numUnservedStopGoPens` INTEGER,`gridPosition` INTEGER,`driverStatus` INTEGER,`resultStatus` INTEGER,`pitLaneTimerActive` INTEGER,`pitLaneTimerInLaneInMS` INTEGER,`pitStopTimerInMS` INTEGER,`pitStopShouldServePen` INTEGER)";
        }
        
        void LapDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void LapDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void LapDataEntity::matchRealData(std::string column,float data){
            if(column.compare("lapDistance") == 0){
this->setLapDistance(data);
} else if(column.compare("totalDistance") == 0){
this->setTotalDistance(data);
} else if(column.compare("safetyCarDelta") == 0){
this->setSafetyCarDelta(data);
}
        }
        void LapDataEntity::matchStringData(std::string column,std::string data){}
        void LapDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> LapDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> LapDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> LapDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("lapDistance",this->getLapDistance()));ret.insert(std::pair<std::string,float>("totalDistance",this->getTotalDistance()));ret.insert(std::pair<std::string,float>("safetyCarDelta",this->getSafetyCarDelta()));
            return ret;
        }
        std::map<std::string,std::string> LapDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> LapDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        