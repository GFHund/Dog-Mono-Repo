
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/ParticipantsPackageEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        ParticipantsPackageEntity::ParticipantsPackageEntity(){}
ParticipantsPackageEntity::ParticipantsPackageEntity(char* rawData,int size,int offset){
this->setHeader(HeaderEntity(rawData,size,offset+0));
this->setNumActiveCars(*((uint8_t*)(rawData+24)));
for(int i=0;i<22;i++){this->setParticipants(i,ParticipantsDataEntity(rawData,size,offset+25+i*56));}
}

        HeaderEntity ParticipantsPackageEntity::getHeader(){return this->header;}
uint8_t ParticipantsPackageEntity::getNumActiveCars(){return this->numActiveCars;}
ParticipantsDataEntity* ParticipantsPackageEntity::getParticipants(){return this->participants;}

        void ParticipantsPackageEntity::setHeader(HeaderEntity header){this->header = header;}
void ParticipantsPackageEntity::setNumActiveCars(uint8_t numActiveCars){this->numActiveCars = numActiveCars;}
void ParticipantsPackageEntity::setParticipants(int i,ParticipantsDataEntity participants){this->participants[i] = participants;}


        std::string ParticipantsPackageEntity::getTableName(){
            return "ParticipantsPackageEntity";
        }
        std::string ParticipantsPackageEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS ParticipantsPackageEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`header` REAL,`numActiveCars` INTEGER,`participants` INTEGER)";
        }
        
        void ParticipantsPackageEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void ParticipantsPackageEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void ParticipantsPackageEntity::matchRealData(std::string column,float data){
            
        }
        void ParticipantsPackageEntity::matchStringData(std::string column,std::string data){}
        void ParticipantsPackageEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> ParticipantsPackageEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> ParticipantsPackageEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> ParticipantsPackageEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> ParticipantsPackageEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> ParticipantsPackageEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        