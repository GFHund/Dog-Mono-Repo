
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/LapHistoryDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        LapHistoryDataEntity::LapHistoryDataEntity(){}
LapHistoryDataEntity::LapHistoryDataEntity(char* rawData,int size,int offset){
this->setLapTimeInMS(*((uint32_t*)(rawData+0)));
this->setSector1TimeInMs(*((uint16_t*)(rawData+4)));
this->setSector2TimeInMs(*((uint16_t*)(rawData+6)));
this->setSector3TimeInMs(*((uint16_t*)(rawData+8)));
this->setLapValidBitFlags(*((uint8_t*)(rawData+10)));
}

        uint32_t LapHistoryDataEntity::getLapTimeInMS(){return this->lapTimeInMS;}
uint16_t LapHistoryDataEntity::getSector1TimeInMs(){return this->sector1TimeInMs;}
uint16_t LapHistoryDataEntity::getSector2TimeInMs(){return this->sector2TimeInMs;}
uint16_t LapHistoryDataEntity::getSector3TimeInMs(){return this->sector3TimeInMs;}
uint8_t LapHistoryDataEntity::getLapValidBitFlags(){return this->lapValidBitFlags;}

        void LapHistoryDataEntity::setLapTimeInMS(uint32_t lapTimeInMS){this->lapTimeInMS = lapTimeInMS;}
void LapHistoryDataEntity::setSector1TimeInMs(uint16_t sector1TimeInMs){this->sector1TimeInMs = sector1TimeInMs;}
void LapHistoryDataEntity::setSector2TimeInMs(uint16_t sector2TimeInMs){this->sector2TimeInMs = sector2TimeInMs;}
void LapHistoryDataEntity::setSector3TimeInMs(uint16_t sector3TimeInMs){this->sector3TimeInMs = sector3TimeInMs;}
void LapHistoryDataEntity::setLapValidBitFlags(uint8_t lapValidBitFlags){this->lapValidBitFlags = lapValidBitFlags;}


        std::string LapHistoryDataEntity::getTableName(){
            return "LapHistoryDataEntity";
        }
        std::string LapHistoryDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS LapHistoryDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`lapTimeInMS` INTEGER,`sector1TimeInMs` INTEGER,`sector2TimeInMs` INTEGER,`sector3TimeInMs` INTEGER,`lapValidBitFlags` INTEGER)";
        }
        
        void LapHistoryDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void LapHistoryDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void LapHistoryDataEntity::matchRealData(std::string column,float data){
            
        }
        void LapHistoryDataEntity::matchStringData(std::string column,std::string data){}
        void LapHistoryDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> LapHistoryDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> LapHistoryDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> LapHistoryDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> LapHistoryDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> LapHistoryDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        