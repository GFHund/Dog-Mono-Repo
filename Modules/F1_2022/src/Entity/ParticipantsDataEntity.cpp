
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/ParticipantsDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        ParticipantsDataEntity::ParticipantsDataEntity(){}
ParticipantsDataEntity::ParticipantsDataEntity(char* rawData,int size,int offset){
this->setAiControlled(*((uint8_t*)(rawData+0)));
this->setDriverId(*((uint8_t*)(rawData+1)));
this->setNetworkId(*((uint8_t*)(rawData+2)));
this->setTeamId(*((uint8_t*)(rawData+3)));
this->setMyTeam(*((uint8_t*)(rawData+4)));
this->setRaceNumer(*((uint8_t*)(rawData+5)));
this->setNationality(*((uint8_t*)(rawData+6)));
for(int i=0;i<48;i++){this->setName(i,*((char*)(rawData+7)));}
this->setYourTelemetry(*((uint8_t*)(rawData+55)));
}

        uint8_t ParticipantsDataEntity::getAiControlled(){return this->aiControlled;}
uint8_t ParticipantsDataEntity::getDriverId(){return this->driverId;}
uint8_t ParticipantsDataEntity::getNetworkId(){return this->networkId;}
uint8_t ParticipantsDataEntity::getTeamId(){return this->teamId;}
uint8_t ParticipantsDataEntity::getMyTeam(){return this->myTeam;}
uint8_t ParticipantsDataEntity::getRaceNumer(){return this->raceNumer;}
uint8_t ParticipantsDataEntity::getNationality(){return this->nationality;}
char* ParticipantsDataEntity::getName(){return this->name;}
uint8_t ParticipantsDataEntity::getYourTelemetry(){return this->yourTelemetry;}

        void ParticipantsDataEntity::setAiControlled(uint8_t aiControlled){this->aiControlled = aiControlled;}
void ParticipantsDataEntity::setDriverId(uint8_t driverId){this->driverId = driverId;}
void ParticipantsDataEntity::setNetworkId(uint8_t networkId){this->networkId = networkId;}
void ParticipantsDataEntity::setTeamId(uint8_t teamId){this->teamId = teamId;}
void ParticipantsDataEntity::setMyTeam(uint8_t myTeam){this->myTeam = myTeam;}
void ParticipantsDataEntity::setRaceNumer(uint8_t raceNumer){this->raceNumer = raceNumer;}
void ParticipantsDataEntity::setNationality(uint8_t nationality){this->nationality = nationality;}
void ParticipantsDataEntity::setName(int i,char name){this->name[i] = name;}
void ParticipantsDataEntity::setYourTelemetry(uint8_t yourTelemetry){this->yourTelemetry = yourTelemetry;}


        std::string ParticipantsDataEntity::getTableName(){
            return "ParticipantsDataEntity";
        }
        std::string ParticipantsDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS ParticipantsDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`aiControlled` INTEGER,`driverId` INTEGER,`networkId` INTEGER,`teamId` INTEGER,`myTeam` INTEGER,`raceNumer` INTEGER,`nationality` INTEGER,`name` INTEGER,`yourTelemetry` INTEGER)";
        }
        
        void ParticipantsDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void ParticipantsDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void ParticipantsDataEntity::matchRealData(std::string column,float data){
            
        }
        void ParticipantsDataEntity::matchStringData(std::string column,std::string data){}
        void ParticipantsDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> ParticipantsDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> ParticipantsDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> ParticipantsDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> ParticipantsDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> ParticipantsDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        