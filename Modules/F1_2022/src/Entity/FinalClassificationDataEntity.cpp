
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/FinalClassificationDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        FinalClassificationDataEntity::FinalClassificationDataEntity(){}
FinalClassificationDataEntity::FinalClassificationDataEntity(char* rawData,int size,int offset){
this->setPosition(*((uint8_t*)(rawData+0)));
this->setNumLaps(*((uint8_t*)(rawData+1)));
this->setGridPosition(*((uint8_t*)(rawData+2)));
this->setPoints(*((uint8_t*)(rawData+3)));
this->setNumPitStops(*((uint8_t*)(rawData+4)));
this->setResultStatus(*((uint8_t*)(rawData+5)));
this->setBestLapTimeInMs(*((uint32_t*)(rawData+6)));
this->setTotalRaceTime(*((double*)(rawData+10)));
this->setPenaltiesTime(*((uint8_t*)(rawData+18)));
this->setNumPenalties(*((uint8_t*)(rawData+19)));
this->setNumTyreStints(*((uint8_t*)(rawData+20)));
for(int i=0;i<8;i++){this->setTyreStintsActual(i,*((uint8_t*)(rawData+21)));}
for(int i=0;i<8;i++){this->setTyreStintsVisual(i,*((uint8_t*)(rawData+29)));}
for(int i=0;i<8;i++){this->setTyreStintsEndLaps(i,*((uint8_t*)(rawData+37)));}
}

        uint8_t FinalClassificationDataEntity::getPosition(){return this->position;}
uint8_t FinalClassificationDataEntity::getNumLaps(){return this->numLaps;}
uint8_t FinalClassificationDataEntity::getGridPosition(){return this->gridPosition;}
uint8_t FinalClassificationDataEntity::getPoints(){return this->points;}
uint8_t FinalClassificationDataEntity::getNumPitStops(){return this->numPitStops;}
uint8_t FinalClassificationDataEntity::getResultStatus(){return this->resultStatus;}
uint32_t FinalClassificationDataEntity::getBestLapTimeInMs(){return this->bestLapTimeInMs;}
double FinalClassificationDataEntity::getTotalRaceTime(){return this->totalRaceTime;}
uint8_t FinalClassificationDataEntity::getPenaltiesTime(){return this->penaltiesTime;}
uint8_t FinalClassificationDataEntity::getNumPenalties(){return this->numPenalties;}
uint8_t FinalClassificationDataEntity::getNumTyreStints(){return this->numTyreStints;}
uint8_t* FinalClassificationDataEntity::getTyreStintsActual(){return this->tyreStintsActual;}
uint8_t* FinalClassificationDataEntity::getTyreStintsVisual(){return this->tyreStintsVisual;}
uint8_t* FinalClassificationDataEntity::getTyreStintsEndLaps(){return this->tyreStintsEndLaps;}

        void FinalClassificationDataEntity::setPosition(uint8_t position){this->position = position;}
void FinalClassificationDataEntity::setNumLaps(uint8_t numLaps){this->numLaps = numLaps;}
void FinalClassificationDataEntity::setGridPosition(uint8_t gridPosition){this->gridPosition = gridPosition;}
void FinalClassificationDataEntity::setPoints(uint8_t points){this->points = points;}
void FinalClassificationDataEntity::setNumPitStops(uint8_t numPitStops){this->numPitStops = numPitStops;}
void FinalClassificationDataEntity::setResultStatus(uint8_t resultStatus){this->resultStatus = resultStatus;}
void FinalClassificationDataEntity::setBestLapTimeInMs(uint32_t bestLapTimeInMs){this->bestLapTimeInMs = bestLapTimeInMs;}
void FinalClassificationDataEntity::setTotalRaceTime(double totalRaceTime){this->totalRaceTime = totalRaceTime;}
void FinalClassificationDataEntity::setPenaltiesTime(uint8_t penaltiesTime){this->penaltiesTime = penaltiesTime;}
void FinalClassificationDataEntity::setNumPenalties(uint8_t numPenalties){this->numPenalties = numPenalties;}
void FinalClassificationDataEntity::setNumTyreStints(uint8_t numTyreStints){this->numTyreStints = numTyreStints;}
void FinalClassificationDataEntity::setTyreStintsActual(int i,uint8_t tyreStintsActual){this->tyreStintsActual[i] = tyreStintsActual;}
void FinalClassificationDataEntity::setTyreStintsVisual(int i,uint8_t tyreStintsVisual){this->tyreStintsVisual[i] = tyreStintsVisual;}
void FinalClassificationDataEntity::setTyreStintsEndLaps(int i,uint8_t tyreStintsEndLaps){this->tyreStintsEndLaps[i] = tyreStintsEndLaps;}


        std::string FinalClassificationDataEntity::getTableName(){
            return "FinalClassificationDataEntity";
        }
        std::string FinalClassificationDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS FinalClassificationDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`position` INTEGER,`numLaps` INTEGER,`gridPosition` INTEGER,`points` INTEGER,`numPitStops` INTEGER,`resultStatus` INTEGER,`bestLapTimeInMs` INTEGER,`totalRaceTime` REAL,`penaltiesTime` INTEGER,`numPenalties` INTEGER,`numTyreStints` INTEGER,`tyreStintsActual` INTEGER,`tyreStintsVisual` INTEGER,`tyreStintsEndLaps` INTEGER)";
        }
        
        void FinalClassificationDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void FinalClassificationDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void FinalClassificationDataEntity::matchRealData(std::string column,float data){
            
        }
        void FinalClassificationDataEntity::matchStringData(std::string column,std::string data){}
        void FinalClassificationDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> FinalClassificationDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> FinalClassificationDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> FinalClassificationDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> FinalClassificationDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> FinalClassificationDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        