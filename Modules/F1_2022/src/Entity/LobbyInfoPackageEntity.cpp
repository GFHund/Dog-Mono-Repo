
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/LobbyInfoPackageEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        LobbyInfoPackageEntity::LobbyInfoPackageEntity(){}
LobbyInfoPackageEntity::LobbyInfoPackageEntity(char* rawData,int size,int offset){
this->setHeader(HeaderEntity(rawData,size,offset+0));
this->setNumPlayers(*((uint8_t*)(rawData+24)));
for(int i=0;i<22;i++){this->setLobbyInfo(i,LobbyInfoDataEntity(rawData,size,offset+25+i*53));}
}

        HeaderEntity LobbyInfoPackageEntity::getHeader(){return this->header;}
uint8_t LobbyInfoPackageEntity::getNumPlayers(){return this->numPlayers;}
LobbyInfoDataEntity* LobbyInfoPackageEntity::getLobbyInfo(){return this->lobbyInfo;}

        void LobbyInfoPackageEntity::setHeader(HeaderEntity header){this->header = header;}
void LobbyInfoPackageEntity::setNumPlayers(uint8_t numPlayers){this->numPlayers = numPlayers;}
void LobbyInfoPackageEntity::setLobbyInfo(int i,LobbyInfoDataEntity lobbyInfo){this->lobbyInfo[i] = lobbyInfo;}


        std::string LobbyInfoPackageEntity::getTableName(){
            return "LobbyInfoPackageEntity";
        }
        std::string LobbyInfoPackageEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS LobbyInfoPackageEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`header` REAL,`numPlayers` INTEGER,`lobbyInfo` INTEGER)";
        }
        
        void LobbyInfoPackageEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void LobbyInfoPackageEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void LobbyInfoPackageEntity::matchRealData(std::string column,float data){
            
        }
        void LobbyInfoPackageEntity::matchStringData(std::string column,std::string data){}
        void LobbyInfoPackageEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> LobbyInfoPackageEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> LobbyInfoPackageEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> LobbyInfoPackageEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> LobbyInfoPackageEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> LobbyInfoPackageEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        