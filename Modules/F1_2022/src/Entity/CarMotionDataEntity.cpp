
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/CarMotionDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        CarMotionDataEntity::CarMotionDataEntity(){}
CarMotionDataEntity::CarMotionDataEntity(char* rawData,int size,int offset){
this->setWorldPositionX(*((float*)(rawData+0)));
this->setWorldPositionY(*((float*)(rawData+4)));
this->setWorldPositionZ(*((float*)(rawData+8)));
this->setWorldVelocityX(*((float*)(rawData+12)));
this->setWorldVelocityY(*((float*)(rawData+16)));
this->setWorldVelocityZ(*((float*)(rawData+20)));
this->setWorldForwardDirX(*((int16_t*)(rawData+24)));
this->setWorldForwardDirY(*((int16_t*)(rawData+26)));
this->setWorldForwardDirZ(*((int16_t*)(rawData+28)));
this->setWorldRightDirX(*((int16_t*)(rawData+30)));
this->setWorldRightDirY(*((int16_t*)(rawData+32)));
this->setWorldRightDirZ(*((int16_t*)(rawData+34)));
this->setGForceLateral(*((float*)(rawData+36)));
this->setGForceLongitudinal(*((float*)(rawData+40)));
this->setGForceVertical(*((float*)(rawData+44)));
this->setYaw(*((float*)(rawData+48)));
this->setPitch(*((float*)(rawData+52)));
this->setRoll(*((float*)(rawData+56)));
}

        float CarMotionDataEntity::getWorldPositionX(){return this->worldPositionX;}
float CarMotionDataEntity::getWorldPositionY(){return this->worldPositionY;}
float CarMotionDataEntity::getWorldPositionZ(){return this->worldPositionZ;}
float CarMotionDataEntity::getWorldVelocityX(){return this->worldVelocityX;}
float CarMotionDataEntity::getWorldVelocityY(){return this->worldVelocityY;}
float CarMotionDataEntity::getWorldVelocityZ(){return this->worldVelocityZ;}
int16_t CarMotionDataEntity::getWorldForwardDirX(){return this->worldForwardDirX;}
int16_t CarMotionDataEntity::getWorldForwardDirY(){return this->worldForwardDirY;}
int16_t CarMotionDataEntity::getWorldForwardDirZ(){return this->worldForwardDirZ;}
int16_t CarMotionDataEntity::getWorldRightDirX(){return this->worldRightDirX;}
int16_t CarMotionDataEntity::getWorldRightDirY(){return this->worldRightDirY;}
int16_t CarMotionDataEntity::getWorldRightDirZ(){return this->worldRightDirZ;}
float CarMotionDataEntity::getGForceLateral(){return this->gForceLateral;}
float CarMotionDataEntity::getGForceLongitudinal(){return this->gForceLongitudinal;}
float CarMotionDataEntity::getGForceVertical(){return this->gForceVertical;}
float CarMotionDataEntity::getYaw(){return this->yaw;}
float CarMotionDataEntity::getPitch(){return this->pitch;}
float CarMotionDataEntity::getRoll(){return this->roll;}

        void CarMotionDataEntity::setWorldPositionX(float worldPositionX){this->worldPositionX = worldPositionX;}
void CarMotionDataEntity::setWorldPositionY(float worldPositionY){this->worldPositionY = worldPositionY;}
void CarMotionDataEntity::setWorldPositionZ(float worldPositionZ){this->worldPositionZ = worldPositionZ;}
void CarMotionDataEntity::setWorldVelocityX(float worldVelocityX){this->worldVelocityX = worldVelocityX;}
void CarMotionDataEntity::setWorldVelocityY(float worldVelocityY){this->worldVelocityY = worldVelocityY;}
void CarMotionDataEntity::setWorldVelocityZ(float worldVelocityZ){this->worldVelocityZ = worldVelocityZ;}
void CarMotionDataEntity::setWorldForwardDirX(int16_t worldForwardDirX){this->worldForwardDirX = worldForwardDirX;}
void CarMotionDataEntity::setWorldForwardDirY(int16_t worldForwardDirY){this->worldForwardDirY = worldForwardDirY;}
void CarMotionDataEntity::setWorldForwardDirZ(int16_t worldForwardDirZ){this->worldForwardDirZ = worldForwardDirZ;}
void CarMotionDataEntity::setWorldRightDirX(int16_t worldRightDirX){this->worldRightDirX = worldRightDirX;}
void CarMotionDataEntity::setWorldRightDirY(int16_t worldRightDirY){this->worldRightDirY = worldRightDirY;}
void CarMotionDataEntity::setWorldRightDirZ(int16_t worldRightDirZ){this->worldRightDirZ = worldRightDirZ;}
void CarMotionDataEntity::setGForceLateral(float gForceLateral){this->gForceLateral = gForceLateral;}
void CarMotionDataEntity::setGForceLongitudinal(float gForceLongitudinal){this->gForceLongitudinal = gForceLongitudinal;}
void CarMotionDataEntity::setGForceVertical(float gForceVertical){this->gForceVertical = gForceVertical;}
void CarMotionDataEntity::setYaw(float yaw){this->yaw = yaw;}
void CarMotionDataEntity::setPitch(float pitch){this->pitch = pitch;}
void CarMotionDataEntity::setRoll(float roll){this->roll = roll;}


        std::string CarMotionDataEntity::getTableName(){
            return "CarMotionDataEntity";
        }
        std::string CarMotionDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS CarMotionDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`worldPositionX` REAL,`worldPositionY` REAL,`worldPositionZ` REAL,`worldVelocityX` REAL,`worldVelocityY` REAL,`worldVelocityZ` REAL,`worldForwardDirX` INTEGER,`worldForwardDirY` INTEGER,`worldForwardDirZ` INTEGER,`worldRightDirX` INTEGER,`worldRightDirY` INTEGER,`worldRightDirZ` INTEGER,`gForceLateral` REAL,`gForceLongitudinal` REAL,`gForceVertical` REAL,`yaw` REAL,`pitch` REAL,`roll` REAL)";
        }
        
        void CarMotionDataEntity::matchIntData(std::string column,int data){
            if(column.compare("worldForwardDirX") == 0){
this->setWorldForwardDirX(data);
} else if(column.compare("worldForwardDirY") == 0){
this->setWorldForwardDirY(data);
} else if(column.compare("worldForwardDirZ") == 0){
this->setWorldForwardDirZ(data);
} else if(column.compare("worldRightDirX") == 0){
this->setWorldRightDirX(data);
} else if(column.compare("worldRightDirY") == 0){
this->setWorldRightDirY(data);
} else if(column.compare("worldRightDirZ") == 0){
this->setWorldRightDirZ(data);
} else {DogGE::Database::AbstractEntity::matchIntData(column,data);}

        }
        void CarMotionDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void CarMotionDataEntity::matchRealData(std::string column,float data){
            if(column.compare("worldPositionX") == 0){
this->setWorldPositionX(data);
} else if(column.compare("worldPositionY") == 0){
this->setWorldPositionY(data);
} else if(column.compare("worldPositionZ") == 0){
this->setWorldPositionZ(data);
} else if(column.compare("worldVelocityX") == 0){
this->setWorldVelocityX(data);
} else if(column.compare("worldVelocityY") == 0){
this->setWorldVelocityY(data);
} else if(column.compare("worldVelocityZ") == 0){
this->setWorldVelocityZ(data);
} else if(column.compare("gForceLateral") == 0){
this->setGForceLateral(data);
} else if(column.compare("gForceLongitudinal") == 0){
this->setGForceLongitudinal(data);
} else if(column.compare("gForceVertical") == 0){
this->setGForceVertical(data);
} else if(column.compare("yaw") == 0){
this->setYaw(data);
} else if(column.compare("pitch") == 0){
this->setPitch(data);
} else if(column.compare("roll") == 0){
this->setRoll(data);
}
        }
        void CarMotionDataEntity::matchStringData(std::string column,std::string data){}
        void CarMotionDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> CarMotionDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            ret.insert(std::pair<std::string,int>("worldForwardDirX",this->getWorldForwardDirX()));
ret.insert(std::pair<std::string,int>("worldForwardDirY",this->getWorldForwardDirY()));
ret.insert(std::pair<std::string,int>("worldForwardDirZ",this->getWorldForwardDirZ()));
ret.insert(std::pair<std::string,int>("worldRightDirX",this->getWorldRightDirX()));
ret.insert(std::pair<std::string,int>("worldRightDirY",this->getWorldRightDirY()));
ret.insert(std::pair<std::string,int>("worldRightDirZ",this->getWorldRightDirZ()));

            return ret;
        }
        std::map<std::string,int64_t> CarMotionDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> CarMotionDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("worldPositionX",this->getWorldPositionX()));ret.insert(std::pair<std::string,float>("worldPositionY",this->getWorldPositionY()));ret.insert(std::pair<std::string,float>("worldPositionZ",this->getWorldPositionZ()));ret.insert(std::pair<std::string,float>("worldVelocityX",this->getWorldVelocityX()));ret.insert(std::pair<std::string,float>("worldVelocityY",this->getWorldVelocityY()));ret.insert(std::pair<std::string,float>("worldVelocityZ",this->getWorldVelocityZ()));ret.insert(std::pair<std::string,float>("gForceLateral",this->getGForceLateral()));ret.insert(std::pair<std::string,float>("gForceLongitudinal",this->getGForceLongitudinal()));ret.insert(std::pair<std::string,float>("gForceVertical",this->getGForceVertical()));ret.insert(std::pair<std::string,float>("yaw",this->getYaw()));ret.insert(std::pair<std::string,float>("pitch",this->getPitch()));ret.insert(std::pair<std::string,float>("roll",this->getRoll()));
            return ret;
        }
        std::map<std::string,std::string> CarMotionDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> CarMotionDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        