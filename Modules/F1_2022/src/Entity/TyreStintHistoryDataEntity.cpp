
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/TyreStintHistoryDataEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        TyreStintHistoryDataEntity::TyreStintHistoryDataEntity(){}
TyreStintHistoryDataEntity::TyreStintHistoryDataEntity(char* rawData,int size,int offset){
this->setEndLap(*((uint8_t*)(rawData+0)));
this->setTyreActualCompound(*((uint8_t*)(rawData+1)));
this->setTyreVisualCompound(*((uint8_t*)(rawData+2)));
}

        uint8_t TyreStintHistoryDataEntity::getEndLap(){return this->endLap;}
uint8_t TyreStintHistoryDataEntity::getTyreActualCompound(){return this->tyreActualCompound;}
uint8_t TyreStintHistoryDataEntity::getTyreVisualCompound(){return this->tyreVisualCompound;}

        void TyreStintHistoryDataEntity::setEndLap(uint8_t endLap){this->endLap = endLap;}
void TyreStintHistoryDataEntity::setTyreActualCompound(uint8_t tyreActualCompound){this->tyreActualCompound = tyreActualCompound;}
void TyreStintHistoryDataEntity::setTyreVisualCompound(uint8_t tyreVisualCompound){this->tyreVisualCompound = tyreVisualCompound;}


        std::string TyreStintHistoryDataEntity::getTableName(){
            return "TyreStintHistoryDataEntity";
        }
        std::string TyreStintHistoryDataEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS TyreStintHistoryDataEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`endLap` INTEGER,`tyreActualCompound` INTEGER,`tyreVisualCompound` INTEGER)";
        }
        
        void TyreStintHistoryDataEntity::matchIntData(std::string column,int data){
            DogGE::Database::AbstractEntity::matchIntData(column,data);

        }
        void TyreStintHistoryDataEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void TyreStintHistoryDataEntity::matchRealData(std::string column,float data){
            
        }
        void TyreStintHistoryDataEntity::matchStringData(std::string column,std::string data){}
        void TyreStintHistoryDataEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> TyreStintHistoryDataEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            
            return ret;
        }
        std::map<std::string,int64_t> TyreStintHistoryDataEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> TyreStintHistoryDataEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> TyreStintHistoryDataEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> TyreStintHistoryDataEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        