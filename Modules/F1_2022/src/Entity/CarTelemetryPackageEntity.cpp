
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/CarTelemetryPackageEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        CarTelemetryPackageEntity::CarTelemetryPackageEntity(){}
CarTelemetryPackageEntity::CarTelemetryPackageEntity(char* rawData,int size,int offset){
this->setHeader(HeaderEntity(rawData,size,offset+0));
for(int i=0;i<22;i++){this->setCarTelemetry(i,CarTelemetryDataEntity(rawData,size,offset+24+i*60));}
this->setMfdPanelIndex(*((uint8_t*)(rawData+1344)));
this->setMfdPanelIndexSecondaryPlayer(*((uint8_t*)(rawData+1345)));
this->setSuggestedGear(*((int8_t*)(rawData+1346)));
}

        HeaderEntity CarTelemetryPackageEntity::getHeader(){return this->header;}
CarTelemetryDataEntity* CarTelemetryPackageEntity::getCarTelemetry(){return this->carTelemetry;}
uint8_t CarTelemetryPackageEntity::getMfdPanelIndex(){return this->mfdPanelIndex;}
uint8_t CarTelemetryPackageEntity::getMfdPanelIndexSecondaryPlayer(){return this->mfdPanelIndexSecondaryPlayer;}
int8_t CarTelemetryPackageEntity::getSuggestedGear(){return this->suggestedGear;}

        void CarTelemetryPackageEntity::setHeader(HeaderEntity header){this->header = header;}
void CarTelemetryPackageEntity::setCarTelemetry(int i,CarTelemetryDataEntity carTelemetry){this->carTelemetry[i] = carTelemetry;}
void CarTelemetryPackageEntity::setMfdPanelIndex(uint8_t mfdPanelIndex){this->mfdPanelIndex = mfdPanelIndex;}
void CarTelemetryPackageEntity::setMfdPanelIndexSecondaryPlayer(uint8_t mfdPanelIndexSecondaryPlayer){this->mfdPanelIndexSecondaryPlayer = mfdPanelIndexSecondaryPlayer;}
void CarTelemetryPackageEntity::setSuggestedGear(int8_t suggestedGear){this->suggestedGear = suggestedGear;}


        std::string CarTelemetryPackageEntity::getTableName(){
            return "CarTelemetryPackageEntity";
        }
        std::string CarTelemetryPackageEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS CarTelemetryPackageEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`header` REAL,`carTelemetry` INTEGER,`mfdPanelIndex` INTEGER,`mfdPanelIndexSecondaryPlayer` INTEGER,`suggestedGear` INTEGER)";
        }
        
        void CarTelemetryPackageEntity::matchIntData(std::string column,int data){
            if(column.compare("suggestedGear") == 0){
this->setSuggestedGear(data);
} else {DogGE::Database::AbstractEntity::matchIntData(column,data);}

        }
        void CarTelemetryPackageEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void CarTelemetryPackageEntity::matchRealData(std::string column,float data){
            
        }
        void CarTelemetryPackageEntity::matchStringData(std::string column,std::string data){}
        void CarTelemetryPackageEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> CarTelemetryPackageEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            ret.insert(std::pair<std::string,int>("suggestedGear",this->getSuggestedGear()));

            return ret;
        }
        std::map<std::string,int64_t> CarTelemetryPackageEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> CarTelemetryPackageEntity::getRealMap(){
            std::map<std::string,float> ret;
            
            return ret;
        }
        std::map<std::string,std::string> CarTelemetryPackageEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> CarTelemetryPackageEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        