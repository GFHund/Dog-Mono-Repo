
/**
 * @file F1DataClassTemplate.cpp
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#include <Entity/MarshalZoneEntity.h>

#include <Exceptions/ValidationException.h>


namespace DogGE{
    namespace F1_2022{
        MarshalZoneEntity::MarshalZoneEntity(){}
MarshalZoneEntity::MarshalZoneEntity(char* rawData,int size,int offset){
this->setZoneStart(*((float*)(rawData+0)));
this->setZoneFlag(*((int8_t*)(rawData+4)));
}

        float MarshalZoneEntity::getZoneStart(){return this->zoneStart;}
int8_t MarshalZoneEntity::getZoneFlag(){return this->zoneFlag;}

        void MarshalZoneEntity::setZoneStart(float zoneStart){this->zoneStart = zoneStart;}
void MarshalZoneEntity::setZoneFlag(int8_t zoneFlag){this->zoneFlag = zoneFlag;}


        std::string MarshalZoneEntity::getTableName(){
            return "MarshalZoneEntity";
        }
        std::string MarshalZoneEntity::getTableDefinition(){
            return "CREATE TABLE IF NOT EXISTS MarshalZoneEntity("
            "`id` INTEGER PRIMARY KEY AUTOINCREMENT,`zoneStart` REAL,`zoneFlag` INTEGER)";
        }
        
        void MarshalZoneEntity::matchIntData(std::string column,int data){
            if(column.compare("zoneFlag") == 0){
this->setZoneFlag(data);
} else {DogGE::Database::AbstractEntity::matchIntData(column,data);}

        }
        void MarshalZoneEntity::matchInt64Data(std::string column,int64_t data){
            
        }
        void MarshalZoneEntity::matchRealData(std::string column,float data){
            if(column.compare("zoneStart") == 0){
this->setZoneStart(data);
}
        }
        void MarshalZoneEntity::matchStringData(std::string column,std::string data){}
        void MarshalZoneEntity::matchRawData(std::string column,char* data,int length){
            
        }

        std::map<std::string,int> MarshalZoneEntity::getIntMap(){
            std::map<std::string,int> ret = DogGE::Database::AbstractEntity::getIntMap();
            ret.insert(std::pair<std::string,int>("zoneFlag",this->getZoneFlag()));

            return ret;
        }
        std::map<std::string,int64_t> MarshalZoneEntity::getInt64Map(){
            std::map<std::string,int64_t> ret;
            
            return ret;
        }
        std::map<std::string,float> MarshalZoneEntity::getRealMap(){
            std::map<std::string,float> ret;
            ret.insert(std::pair<std::string,float>("zoneStart",this->getZoneStart()));
            return ret;
        }
        std::map<std::string,std::string> MarshalZoneEntity::getStringMap(){
            std::map<std::string,std::string> ret;
            return ret;
        }
        std::map<std::string,std::pair<char*,int>> MarshalZoneEntity::getRawMap(){
            std::map<std::string,std::pair<char*,int>> ret;
            
            return ret;
        }
    }
}                                                                        