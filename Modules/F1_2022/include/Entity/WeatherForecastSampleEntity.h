/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____WeatherForecastSample_ENTITY____
#define ____WeatherForecastSample_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>



namespace DogGE{
    namespace F1_2022{
        class WeatherForecastSampleEntity: public DogGE::Database::AbstractEntity{
            private:
            uint8_t sessionType;
uint8_t timeOffset;
uint8_t weather;
int8_t trackTemperature;
int8_t trackTemperatureChange;
int8_t airTemperature;
int8_t airTemperatureChange;
uint8_t rainPercentage;

            public:
            WeatherForecastSampleEntity();
WeatherForecastSampleEntity(char* rawData,int size,int offset=0);


            void setSessionType(uint8_t sessionType);
void setTimeOffset(uint8_t timeOffset);
void setWeather(uint8_t weather);
void setTrackTemperature(int8_t trackTemperature);
void setTrackTemperatureChange(int8_t trackTemperatureChange);
void setAirTemperature(int8_t airTemperature);
void setAirTemperatureChange(int8_t airTemperatureChange);
void setRainPercentage(uint8_t rainPercentage);

            uint8_t getSessionType();
uint8_t getTimeOffset();
uint8_t getWeather();
int8_t getTrackTemperature();
int8_t getTrackTemperatureChange();
int8_t getAirTemperature();
int8_t getAirTemperatureChange();
uint8_t getRainPercentage();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   