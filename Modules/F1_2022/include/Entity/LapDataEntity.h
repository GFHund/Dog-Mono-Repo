/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____F1_DATA_ENTITY____
#define ____F1_DATA_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>



namespace DogGE{
    namespace F1_2022{
        class LapDataEntity: public DogGE::Database::AbstractEntity{
            private:
            uint32_t lastLapTimeInMs;
uint32_t currentLapTimeInMs;
uint32_t sector1TimeInMs;
uint32_t sector2TimeInMs;
float lapDistance;
float totalDistance;
float safetyCarDelta;
uint8_t carPosition;
uint8_t currentLapNum;
uint8_t pitStatus;
uint8_t numPitStops;
uint8_t sector;
uint8_t currentLapInvalid;
uint8_t penalties;
uint8_t warnings;
uint8_t numUnservedDriveThroughPens;
uint8_t numUnservedStopGoPens;
uint8_t gridPosition;
uint8_t driverStatus;
uint8_t resultStatus;
uint8_t pitLaneTimerActive;
uint16_t pitLaneTimerInLaneInMS;
uint16_t pitStopTimerInMS;
uint8_t pitStopShouldServePen;

            public:
            

            void setLastLapTimeInMs(uint32_t lastLapTimeInMs);
void setCurrentLapTimeInMs(uint32_t currentLapTimeInMs);
void setSector1TimeInMs(uint32_t sector1TimeInMs);
void setSector2TimeInMs(uint32_t sector2TimeInMs);
void setLapDistance(float lapDistance);
void setTotalDistance(float totalDistance);
void setSafetyCarDelta(float safetyCarDelta);
void setCarPosition(uint8_t carPosition);
void setCurrentLapNum(uint8_t currentLapNum);
void setPitStatus(uint8_t pitStatus);
void setNumPitStops(uint8_t numPitStops);
void setSector(uint8_t sector);
void setCurrentLapInvalid(uint8_t currentLapInvalid);
void setPenalties(uint8_t penalties);
void setWarnings(uint8_t warnings);
void setNumUnservedDriveThroughPens(uint8_t numUnservedDriveThroughPens);
void setNumUnservedStopGoPens(uint8_t numUnservedStopGoPens);
void setGridPosition(uint8_t gridPosition);
void setDriverStatus(uint8_t driverStatus);
void setResultStatus(uint8_t resultStatus);
void setPitLaneTimerActive(uint8_t pitLaneTimerActive);
void setPitLaneTimerInLaneInMS(uint16_t pitLaneTimerInLaneInMS);
void setPitStopTimerInMS(uint16_t pitStopTimerInMS);
void setPitStopShouldServePen(uint8_t pitStopShouldServePen);

            uint32_t getLastLapTimeInMs();
uint32_t getCurrentLapTimeInMs();
uint32_t getSector1TimeInMs();
uint32_t getSector2TimeInMs();
float getLapDistance();
float getTotalDistance();
float getSafetyCarDelta();
uint8_t getCarPosition();
uint8_t getCurrentLapNum();
uint8_t getPitStatus();
uint8_t getNumPitStops();
uint8_t getSector();
uint8_t getCurrentLapInvalid();
uint8_t getPenalties();
uint8_t getWarnings();
uint8_t getNumUnservedDriveThroughPens();
uint8_t getNumUnservedStopGoPens();
uint8_t getGridPosition();
uint8_t getDriverStatus();
uint8_t getResultStatus();
uint8_t getPitLaneTimerActive();
uint16_t getPitLaneTimerInLaneInMS();
uint16_t getPitStopTimerInMS();
uint8_t getPitStopShouldServePen();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   