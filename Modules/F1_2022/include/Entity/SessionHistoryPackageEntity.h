/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____F1_DATA_ENTITY____
#define ____F1_DATA_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>



namespace DogGE{
    namespace F1_2022{
        class SessionHistoryPackageEntity: public DogGE::Database::AbstractEntity{
            private:
            Header header;
uint8_t carIdx;
uint8_t numLaps;
uint8_t numTyreStints;
uint8_t bestLapTimeLapNum;
uint8_t bestSector1LapNum;
uint8_t bestSector2LapNum;
uint8_t bestSector3LapNum;
LapHistoryData lapHistoryData[100];
TyreStintHistoryData tyreStintsHistoryData[8];

            public:
            

            void setHeader(Header header);
void setCarIdx(uint8_t carIdx);
void setNumLaps(uint8_t numLaps);
void setNumTyreStints(uint8_t numTyreStints);
void setBestLapTimeLapNum(uint8_t bestLapTimeLapNum);
void setBestSector1LapNum(uint8_t bestSector1LapNum);
void setBestSector2LapNum(uint8_t bestSector2LapNum);
void setBestSector3LapNum(uint8_t bestSector3LapNum);
void setLapHistoryData(LapHistoryData* lapHistoryData);
void setTyreStintsHistoryData(TyreStintHistoryData* tyreStintsHistoryData);

            Header getHeader();
uint8_t getCarIdx();
uint8_t getNumLaps();
uint8_t getNumTyreStints();
uint8_t getBestLapTimeLapNum();
uint8_t getBestSector1LapNum();
uint8_t getBestSector2LapNum();
uint8_t getBestSector3LapNum();
LapHistoryData* getLapHistoryData();
TyreStintHistoryData* getTyreStintsHistoryData();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   