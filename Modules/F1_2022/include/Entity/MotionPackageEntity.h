/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____MotionPackage_ENTITY____
#define ____MotionPackage_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>

#include <Entity/HeaderEntity.h>
#include <Entity/CarMotionDataEntity.h>


namespace DogGE{
    namespace F1_2022{
        class MotionPackageEntity: public DogGE::Database::AbstractEntity{
            private:
            HeaderEntity header;
CarMotionDataEntity carMotionData[22];
float suspensionPosition[4];
float suspensionVelocity[4];
float suspensionAcceleration[4];
float wheelSpeed[4];
float wheelSlip[4];
float localVelocityX;
float localVelocityY;
float localVelocityZ;
float angularVelocityX;
float angularVelocityY;
float angularVelocityZ;
float angularAccelerationX;
float angularAccelerationY;
float angularAccelerationZ;
float frontWheelsAngle;

            public:
            MotionPackageEntity();
MotionPackageEntity(char* rawData,int size,int offset=0);


            void setHeader(HeaderEntity header);
void setCarMotionData(int i,CarMotionDataEntity carMotionData);
void setSuspensionPosition(int i,float suspensionPosition);
void setSuspensionVelocity(int i,float suspensionVelocity);
void setSuspensionAcceleration(int i,float suspensionAcceleration);
void setWheelSpeed(int i,float wheelSpeed);
void setWheelSlip(int i,float wheelSlip);
void setLocalVelocityX(float localVelocityX);
void setLocalVelocityY(float localVelocityY);
void setLocalVelocityZ(float localVelocityZ);
void setAngularVelocityX(float angularVelocityX);
void setAngularVelocityY(float angularVelocityY);
void setAngularVelocityZ(float angularVelocityZ);
void setAngularAccelerationX(float angularAccelerationX);
void setAngularAccelerationY(float angularAccelerationY);
void setAngularAccelerationZ(float angularAccelerationZ);
void setFrontWheelsAngle(float frontWheelsAngle);

            HeaderEntity getHeader();
CarMotionDataEntity* getCarMotionData();
float* getSuspensionPosition();
float* getSuspensionVelocity();
float* getSuspensionAcceleration();
float* getWheelSpeed();
float* getWheelSlip();
float getLocalVelocityX();
float getLocalVelocityY();
float getLocalVelocityZ();
float getAngularVelocityX();
float getAngularVelocityY();
float getAngularVelocityZ();
float getAngularAccelerationX();
float getAngularAccelerationY();
float getAngularAccelerationZ();
float getFrontWheelsAngle();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   