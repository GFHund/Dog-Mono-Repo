/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____SessionPackage_ENTITY____
#define ____SessionPackage_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>

#include <Entity/HeaderEntity.h>
#include <Entity/MarshalZoneEntity.h>
#include <Entity/WeatherForecastSampleEntity.h>


namespace DogGE{
    namespace F1_2022{
        class SessionPackageEntity: public DogGE::Database::AbstractEntity{
            private:
            HeaderEntity header;
uint8_t weather;
int8_t trackTemperature;
int8_t airTemperature;
uint8_t totalLaps;
uint16_t trackLength;
uint8_t sessionType;
int8_t trackId;
uint8_t formula;
uint16_t sessionTimeLeft;
uint16_t sessionDuration;
uint8_t pitSpeedLimit;
uint8_t gamePaused;
uint8_t isSpectating;
uint8_t spectatorCarIndex;
uint8_t sliProNativeSupport;
uint8_t numMarshalZones;
MarshalZoneEntity marshalZones[21];
uint8_t safetyCarStatus;
uint8_t networkGame;
uint8_t numWeatherForecastSamples;
WeatherForecastSampleEntity weatherForecastSamples[56];
uint8_t forecastAccuracy;
uint8_t aiDifficulty;
uint32_t seasonLinkIdentifier;
uint32_t weekendLinkIdentifier;
uint32_t sessionLinkIdentifier;
uint8_t pitStopWindowIdealLap;
uint8_t pitStopWindowLatestLap;
uint8_t pitStopRejoinPosition;
uint8_t steeringAssist;
uint8_t brakingAssist;
uint8_t gearboxAssist;
uint8_t pitAssist;
uint8_t pitReleaseAssist;
uint8_t ERSAssist;
uint8_t DRSAssist;
uint8_t dynamicRacingLine;
uint8_t dynamicRacingLineType;
uint8_t gameMode;
uint8_t ruleSet;
uint32_t timeOfDay;
uint8_t sessionLength;

            public:
            SessionPackageEntity();
SessionPackageEntity(char* rawData,int size,int offset=0);


            void setHeader(HeaderEntity header);
void setWeather(uint8_t weather);
void setTrackTemperature(int8_t trackTemperature);
void setAirTemperature(int8_t airTemperature);
void setTotalLaps(uint8_t totalLaps);
void setTrackLength(uint16_t trackLength);
void setSessionType(uint8_t sessionType);
void setTrackId(int8_t trackId);
void setFormula(uint8_t formula);
void setSessionTimeLeft(uint16_t sessionTimeLeft);
void setSessionDuration(uint16_t sessionDuration);
void setPitSpeedLimit(uint8_t pitSpeedLimit);
void setGamePaused(uint8_t gamePaused);
void setIsSpectating(uint8_t isSpectating);
void setSpectatorCarIndex(uint8_t spectatorCarIndex);
void setSliProNativeSupport(uint8_t sliProNativeSupport);
void setNumMarshalZones(uint8_t numMarshalZones);
void setMarshalZones(int i,MarshalZoneEntity marshalZones);
void setSafetyCarStatus(uint8_t safetyCarStatus);
void setNetworkGame(uint8_t networkGame);
void setNumWeatherForecastSamples(uint8_t numWeatherForecastSamples);
void setWeatherForecastSamples(int i,WeatherForecastSampleEntity weatherForecastSamples);
void setForecastAccuracy(uint8_t forecastAccuracy);
void setAiDifficulty(uint8_t aiDifficulty);
void setSeasonLinkIdentifier(uint32_t seasonLinkIdentifier);
void setWeekendLinkIdentifier(uint32_t weekendLinkIdentifier);
void setSessionLinkIdentifier(uint32_t sessionLinkIdentifier);
void setPitStopWindowIdealLap(uint8_t pitStopWindowIdealLap);
void setPitStopWindowLatestLap(uint8_t pitStopWindowLatestLap);
void setPitStopRejoinPosition(uint8_t pitStopRejoinPosition);
void setSteeringAssist(uint8_t steeringAssist);
void setBrakingAssist(uint8_t brakingAssist);
void setGearboxAssist(uint8_t gearboxAssist);
void setPitAssist(uint8_t pitAssist);
void setPitReleaseAssist(uint8_t pitReleaseAssist);
void setERSAssist(uint8_t ERSAssist);
void setDRSAssist(uint8_t DRSAssist);
void setDynamicRacingLine(uint8_t dynamicRacingLine);
void setDynamicRacingLineType(uint8_t dynamicRacingLineType);
void setGameMode(uint8_t gameMode);
void setRuleSet(uint8_t ruleSet);
void setTimeOfDay(uint32_t timeOfDay);
void setSessionLength(uint8_t sessionLength);

            HeaderEntity getHeader();
uint8_t getWeather();
int8_t getTrackTemperature();
int8_t getAirTemperature();
uint8_t getTotalLaps();
uint16_t getTrackLength();
uint8_t getSessionType();
int8_t getTrackId();
uint8_t getFormula();
uint16_t getSessionTimeLeft();
uint16_t getSessionDuration();
uint8_t getPitSpeedLimit();
uint8_t getGamePaused();
uint8_t getIsSpectating();
uint8_t getSpectatorCarIndex();
uint8_t getSliProNativeSupport();
uint8_t getNumMarshalZones();
MarshalZoneEntity* getMarshalZones();
uint8_t getSafetyCarStatus();
uint8_t getNetworkGame();
uint8_t getNumWeatherForecastSamples();
WeatherForecastSampleEntity* getWeatherForecastSamples();
uint8_t getForecastAccuracy();
uint8_t getAiDifficulty();
uint32_t getSeasonLinkIdentifier();
uint32_t getWeekendLinkIdentifier();
uint32_t getSessionLinkIdentifier();
uint8_t getPitStopWindowIdealLap();
uint8_t getPitStopWindowLatestLap();
uint8_t getPitStopRejoinPosition();
uint8_t getSteeringAssist();
uint8_t getBrakingAssist();
uint8_t getGearboxAssist();
uint8_t getPitAssist();
uint8_t getPitReleaseAssist();
uint8_t getERSAssist();
uint8_t getDRSAssist();
uint8_t getDynamicRacingLine();
uint8_t getDynamicRacingLineType();
uint8_t getGameMode();
uint8_t getRuleSet();
uint32_t getTimeOfDay();
uint8_t getSessionLength();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   