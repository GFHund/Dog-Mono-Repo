/**
 * @file F1DataClassTemplate.h
 * @author Philipp Holzmann (Philipp1990@web.de)
 * @brief 
 * @version 1.0
 * @date 2022-05-14
 * 
 * @copyright Copyright (c) 2022
 * 
 * This file ist generated by the f1GameParserGenerator Program. Any changes will be overriden.
 * 
 */

#ifndef ____F1_DATA_ENTITY____
#define ____F1_DATA_ENTITY____
#pragma once

#include <stdint.h>
#include <AbstractEntity.h>



namespace DogGE{
    namespace F1_2022{
        class CarSetupDataEntity: public DogGE::Database::AbstractEntity{
            private:
            uint8_t frontWing;
uint8_t rearWing;
uint8_t onThrottle;
uint8_t offThrottle;
float frontCamber;
float rearCamber;
float frontToe;
float rearToe;
uint8_t frontSuspension;
uint8_t rearSuspension;
uint8_t frontAntiRollBar;
uint8_t rearAntiRollBar;
uint8_t frontSuspensionHeight;
uint8_t rearSuspensionHeight;
uint8_t breakePressure;
uint8_t breakeBias;
float rearLeftTyrePressure;
float rearRightTyrePressure;
float frontLeftTyrePressure;
float frontRightTyrePressure;
uint8_t ballast;
float fuelLoad;

            public:
            

            void setFrontWing(uint8_t frontWing);
void setRearWing(uint8_t rearWing);
void setOnThrottle(uint8_t onThrottle);
void setOffThrottle(uint8_t offThrottle);
void setFrontCamber(float frontCamber);
void setRearCamber(float rearCamber);
void setFrontToe(float frontToe);
void setRearToe(float rearToe);
void setFrontSuspension(uint8_t frontSuspension);
void setRearSuspension(uint8_t rearSuspension);
void setFrontAntiRollBar(uint8_t frontAntiRollBar);
void setRearAntiRollBar(uint8_t rearAntiRollBar);
void setFrontSuspensionHeight(uint8_t frontSuspensionHeight);
void setRearSuspensionHeight(uint8_t rearSuspensionHeight);
void setBreakePressure(uint8_t breakePressure);
void setBreakeBias(uint8_t breakeBias);
void setRearLeftTyrePressure(float rearLeftTyrePressure);
void setRearRightTyrePressure(float rearRightTyrePressure);
void setFrontLeftTyrePressure(float frontLeftTyrePressure);
void setFrontRightTyrePressure(float frontRightTyrePressure);
void setBallast(uint8_t ballast);
void setFuelLoad(float fuelLoad);

            uint8_t getFrontWing();
uint8_t getRearWing();
uint8_t getOnThrottle();
uint8_t getOffThrottle();
float getFrontCamber();
float getRearCamber();
float getFrontToe();
float getRearToe();
uint8_t getFrontSuspension();
uint8_t getRearSuspension();
uint8_t getFrontAntiRollBar();
uint8_t getRearAntiRollBar();
uint8_t getFrontSuspensionHeight();
uint8_t getRearSuspensionHeight();
uint8_t getBreakePressure();
uint8_t getBreakeBias();
float getRearLeftTyrePressure();
float getRearRightTyrePressure();
float getFrontLeftTyrePressure();
float getFrontRightTyrePressure();
uint8_t getBallast();
float getFuelLoad();


            virtual std::string getTableName();
            virtual std::string getTableDefinition();
            
            virtual void matchIntData(std::string column,int data);
            virtual void matchInt64Data(std::string column,int64_t data);
            virtual void matchRealData(std::string column,float data);
            virtual void matchStringData(std::string column,std::string data);
            virtual void matchRawData(std::string column,char* data,int length);

            virtual std::map<std::string,int> getIntMap();
            virtual std::map<std::string,int64_t> getInt64Map();
            virtual std::map<std::string,float> getRealMap();
            virtual std::map<std::string,std::string> getStringMap();
            virtual std::map<std::string,std::pair<char*,int>> getRawMap();
        };
    }
}

#endif                                                   